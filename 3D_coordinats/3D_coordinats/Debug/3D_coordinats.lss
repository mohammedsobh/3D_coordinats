
3D_coordinats.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c5  00800060  00800060  00000ffa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b3b  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7f  00000000  00000000  00002ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000feb  00000000  00000000  0000374a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00004738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b07  00000000  00000000  0000512a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006c31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 32       	cpi	r26, 0x25	; 37
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 13 01 	call	0x226	; 0x226 <main>
  74:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <third_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int third_value (char* String)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	c4 56       	subi	r28, 0x64	; 100
  86:	d1 09       	sbc	r29, r1
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	ac 01       	movw	r20, r24
  94:	fe 01       	movw	r30, r28
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	9e 01       	movw	r18, r28
  9a:	2b 59       	subi	r18, 0x9B	; 155
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
	int i = 0,j=0;
	char third_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		third_v [i] = 0;
  9e:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
int third_value (char* String)
{
	int i = 0,j=0;
	char third_v[100];
	for (int i = 0 ; i < 100 ;i++)
  a0:	e2 17       	cp	r30, r18
  a2:	f3 07       	cpc	r31, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <third_value+0x22>
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		third_v [i] = 0;
	}
	while(1)
	{
		if (String [i] == '-'){
  ae:	fa 01       	movw	r30, r20
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	9d 32       	cpi	r25, 0x2D	; 45
  b8:	99 f4       	brne	.+38     	; 0xe0 <third_value+0x64>
			third_v [j] = String[j+i+1];
  ba:	f9 01       	movw	r30, r18
  bc:	e6 0f       	add	r30, r22
  be:	f7 1f       	adc	r31, r23
  c0:	e4 0f       	add	r30, r20
  c2:	f5 1f       	adc	r31, r21
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	a1 e0       	ldi	r26, 0x01	; 1
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ac 0f       	add	r26, r28
  cc:	bd 1f       	adc	r27, r29
  ce:	a6 0f       	add	r26, r22
  d0:	b7 1f       	adc	r27, r23
  d2:	8c 93       	st	X, r24
			if (String [j+i+2] == ';')
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	8b 33       	cpi	r24, 0x3B	; 59
  d8:	31 f0       	breq	.+12     	; 0xe6 <third_value+0x6a>
			break;
			j++;
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	e7 cf       	rjmp	.-50     	; 0xae <third_value+0x32>
		}
		else
		i++;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	e4 cf       	rjmp	.-56     	; 0xae <third_value+0x32>
	}
	return (atoi(third_v));
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 9b 07 	call	0xf36	; 0xf36 <atoi>
}
  ee:	cc 59       	subi	r28, 0x9C	; 156
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <second_value>:

int second_value (char* String)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c4 56       	subi	r28, 0x64	; 100
 10c:	d1 09       	sbc	r29, r1
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	ac 01       	movw	r20, r24
 11a:	fe 01       	movw	r30, r28
 11c:	31 96       	adiw	r30, 0x01	; 1
 11e:	9e 01       	movw	r18, r28
 120:	2b 59       	subi	r18, 0x9B	; 155
 122:	3f 4f       	sbci	r19, 0xFF	; 255
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		second_v [i] = 0;
 124:	11 92       	st	Z+, r1

int second_value (char* String)
{
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
 126:	e2 17       	cp	r30, r18
 128:	f3 07       	cpc	r31, r19
 12a:	e1 f7       	brne	.-8      	; 0x124 <second_value+0x22>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
	{
		second_v [i] = 0;
	}
    while(1)
    {
        if (String [i] == ','){
 134:	fa 01       	movw	r30, r20
 136:	e2 0f       	add	r30, r18
 138:	f3 1f       	adc	r31, r19
 13a:	90 81       	ld	r25, Z
 13c:	9c 32       	cpi	r25, 0x2C	; 44
 13e:	99 f4       	brne	.+38     	; 0x166 <second_value+0x64>
				second_v [j] = String[j+i+1];
 140:	f9 01       	movw	r30, r18
 142:	e6 0f       	add	r30, r22
 144:	f7 1f       	adc	r31, r23
 146:	e4 0f       	add	r30, r20
 148:	f5 1f       	adc	r31, r21
 14a:	81 81       	ldd	r24, Z+1	; 0x01
 14c:	a1 e0       	ldi	r26, 0x01	; 1
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	ac 0f       	add	r26, r28
 152:	bd 1f       	adc	r27, r29
 154:	a6 0f       	add	r26, r22
 156:	b7 1f       	adc	r27, r23
 158:	8c 93       	st	X, r24
				if (String [j+i+2] == '-')
 15a:	82 81       	ldd	r24, Z+2	; 0x02
 15c:	8d 32       	cpi	r24, 0x2D	; 45
 15e:	31 f0       	breq	.+12     	; 0x16c <second_value+0x6a>
				break;
				j++;
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	e7 cf       	rjmp	.-50     	; 0x134 <second_value+0x32>
		}
		else
		i++;
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	e4 cf       	rjmp	.-56     	; 0x134 <second_value+0x32>
    }
    return (atoi(second_v));
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 9b 07 	call	0xf36	; 0xf36 <atoi>
}
 174:	cc 59       	subi	r28, 0x9C	; 156
 176:	df 4f       	sbci	r29, 0xFF	; 255
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int *current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
 18e:	71 83       	std	Z+1, r23	; 0x01
 190:	60 83       	st	Z, r22
    return x;
 192:	cb 01       	movw	r24, r22
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	08 95       	ret

0000019a <Init>:
		y=0;
		z=0;
	}
}
void Init(void)
{
 19a:	8f 92       	push	r8
 19c:	9f 92       	push	r9
 19e:	af 92       	push	r10
 1a0:	bf 92       	push	r11
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
	//StepperInit(16,1000);
	three_stepper_Intiat(St_PORTC0,St_PORTC1,St_PORTC2,St_PORTC3,St_PORTC4,St_PORTC5,St_PORTC6,St_PORTC7,St_PORTA7,16,1000);
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	8f 93       	push	r24
 1b2:	88 ee       	ldi	r24, 0xE8	; 232
 1b4:	8f 93       	push	r24
 1b6:	1f 92       	push	r1
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	8f 93       	push	r24
 1bc:	0f 2e       	mov	r0, r31
 1be:	f7 e0       	ldi	r31, 0x07	; 7
 1c0:	8f 2e       	mov	r8, r31
 1c2:	91 2c       	mov	r9, r1
 1c4:	f0 2d       	mov	r31, r0
 1c6:	0f 2e       	mov	r0, r31
 1c8:	fb e1       	ldi	r31, 0x1B	; 27
 1ca:	af 2e       	mov	r10, r31
 1cc:	b1 2c       	mov	r11, r1
 1ce:	f0 2d       	mov	r31, r0
 1d0:	0f 2e       	mov	r0, r31
 1d2:	fa e1       	ldi	r31, 0x1A	; 26
 1d4:	cf 2e       	mov	r12, r31
 1d6:	d1 2c       	mov	r13, r1
 1d8:	f0 2d       	mov	r31, r0
 1da:	0f 2e       	mov	r0, r31
 1dc:	f9 e1       	ldi	r31, 0x19	; 25
 1de:	ef 2e       	mov	r14, r31
 1e0:	f1 2c       	mov	r15, r1
 1e2:	f0 2d       	mov	r31, r0
 1e4:	08 e1       	ldi	r16, 0x18	; 24
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	27 e1       	ldi	r18, 0x17	; 23
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	46 e1       	ldi	r20, 0x16	; 22
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	65 e1       	ldi	r22, 0x15	; 21
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	84 e1       	ldi	r24, 0x14	; 20
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <three_stepper_Intiat>
	DDRC |=0XFF;
 1fc:	84 b3       	in	r24, 0x14	; 20
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA7);
 202:	d7 9a       	sbi	0x1a, 7	; 26
	UART_INIT();
 204:	0e 94 49 07 	call	0xe92	; 0xe92 <UART_INIT>
}
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	bf 90       	pop	r11
 21e:	af 90       	pop	r10
 220:	9f 90       	pop	r9
 222:	8f 90       	pop	r8
 224:	08 95       	ret

00000226 <main>:
int y;
int z;
char String [150]  ;

int main(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	2f 97       	sbiw	r28, 0x0f	; 15
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
	Init();
 23a:	0e 94 cd 00 	call	0x19a	; 0x19a <Init>
 23e:	09 ed       	ldi	r16, 0xD9	; 217
 240:	10 e0       	ldi	r17, 0x00	; 0
			
		}
		
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
			x *=-1;
			statusx = 1;
 242:	ee 24       	eor	r14, r14
 244:	e3 94       	inc	r14
			statusz = 1;
		}
		else
		statusz = 0;
		bool status [] = {statusx,statusy,statusz};
		long steps[] = {(x*100),(y*100),(z*100)};
 246:	0f 2e       	mov	r0, r31
 248:	f4 e6       	ldi	r31, 0x64	; 100
 24a:	ff 2e       	mov	r15, r31
 24c:	f0 2d       	mov	r31, r0
 24e:	e5 e7       	ldi	r30, 0x75	; 117
 250:	f0 e0       	ldi	r31, 0x00	; 0
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
		{
			String [i] = 0;
 252:	11 92       	st	Z+, r1
int main(void)
{
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
 254:	e0 17       	cp	r30, r16
 256:	f1 07       	cpc	r31, r17
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x2c>
		{
			String [i] = 0;
		}
		Recive_Data(String);
 25a:	85 e7       	ldi	r24, 0x75	; 117
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 55 07 	call	0xeaa	; 0xeaa <Recive_Data>
		value_1 = atoi(String);           //extract first value
 262:	85 e7       	ldi	r24, 0x75	; 117
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 9b 07 	call	0xf36	; 0xf36 <atoi>
 26a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <value_1+0x1>
 26e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <value_1>
		value_2 = second_value (String); //call function to extract second value
 272:	85 e7       	ldi	r24, 0x75	; 117
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 81 00 	call	0x102	; 0x102 <second_value>
 27a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <value_2+0x1>
 27e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <value_2>
		value_3 = third_value (String); //call function to extract third value
 282:	85 e7       	ldi	r24, 0x75	; 117
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 3e 00 	call	0x7c	; 0x7c <third_value>
 28a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <value_3+0x1>
 28e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <value_3>

		
		if (!(value_1>250||value_2>250||value_3>250||value_1<0||value_2<0||value_3<0)) // if the values don't skip the plate ,use it
 292:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <value_1>
 296:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <value_1+0x1>
 29a:	6b 3f       	cpi	r22, 0xFB	; 251
 29c:	71 05       	cpc	r23, r1
 29e:	b0 f5       	brcc	.+108    	; 0x30c <main+0xe6>
 2a0:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <value_2>
 2a4:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <value_2+0x1>
 2a8:	2b 3f       	cpi	r18, 0xFB	; 251
 2aa:	31 05       	cpc	r19, r1
 2ac:	78 f5       	brcc	.+94     	; 0x30c <main+0xe6>
 2ae:	8b 3f       	cpi	r24, 0xFB	; 251
 2b0:	91 05       	cpc	r25, r1
 2b2:	60 f5       	brcc	.+88     	; 0x30c <main+0xe6>

		{
			x = sub_function (&old_val_1, value_1);     //call function to extract first step
 2b4:	84 e6       	ldi	r24, 0x64	; 100
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 2bc:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <x+0x1>
 2c0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <x>
			y = sub_function (&old_val_2, value_2);    //call function to extract second step
 2c4:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <value_2>
 2c8:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <value_2+0x1>
 2cc:	82 e6       	ldi	r24, 0x62	; 98
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 2d4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <y+0x1>
 2d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <y>
			z = sub_function (&old_val_3, value_3);    //call function to extract third step
 2dc:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <value_3>
 2e0:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <value_3+0x1>
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 2ec:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <z+0x1>
 2f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <z>
			value_1 = 0;
 2f4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <value_1+0x1>
 2f8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <value_1>
			value_2 = 0;
 2fc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <value_2+0x1>
 300:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <value_2>
			value_3 = 0;
 304:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <value_3+0x1>
 308:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <value_3>
			
		}
		
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
 30c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <x>
 310:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <x+0x1>
 314:	99 23       	and	r25, r25
 316:	54 f4       	brge	.+20     	; 0x32c <main+0x106>
			x *=-1;
 318:	91 95       	neg	r25
 31a:	81 95       	neg	r24
 31c:	91 09       	sbc	r25, r1
 31e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <x+0x1>
 322:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <x>
			statusx = 1;
 326:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <statusx>
 32a:	02 c0       	rjmp	.+4      	; 0x330 <main+0x10a>
		}
		else
		statusx = 0;
 32c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <statusx>
		if (y < 0 ){
 330:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <y>
 334:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <y+0x1>
 338:	99 23       	and	r25, r25
 33a:	54 f4       	brge	.+20     	; 0x350 <main+0x12a>
			y *=-1;
 33c:	91 95       	neg	r25
 33e:	81 95       	neg	r24
 340:	91 09       	sbc	r25, r1
 342:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <y+0x1>
 346:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <y>
			statusy = 1;
 34a:	e0 92 67 00 	sts	0x0067, r14	; 0x800067 <statusy>
 34e:	02 c0       	rjmp	.+4      	; 0x354 <main+0x12e>
		}
		else
		statusy = 0;
 350:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <statusy>
		if (z < 0 ){
 354:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <z>
 358:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <z+0x1>
 35c:	99 23       	and	r25, r25
 35e:	54 f4       	brge	.+20     	; 0x374 <main+0x14e>
			z *=-1;
 360:	91 95       	neg	r25
 362:	81 95       	neg	r24
 364:	91 09       	sbc	r25, r1
 366:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <z+0x1>
 36a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <z>
			statusz = 1;
 36e:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <statusz>
 372:	02 c0       	rjmp	.+4      	; 0x378 <main+0x152>
		}
		else
		statusz = 0;
 374:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <statusz>
		bool status [] = {statusx,statusy,statusz};
 378:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <statusx>
 37c:	8d 87       	std	Y+13, r24	; 0x0d
 37e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <statusy>
 382:	8e 87       	std	Y+14, r24	; 0x0e
 384:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <statusz>
 388:	8f 87       	std	Y+15, r24	; 0x0f
		long steps[] = {(x*100),(y*100),(z*100)};
 38a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <x>
 38e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <x+0x1>
 392:	f2 9e       	mul	r15, r18
 394:	c0 01       	movw	r24, r0
 396:	f3 9e       	mul	r15, r19
 398:	90 0d       	add	r25, r0
 39a:	11 24       	eor	r1, r1
 39c:	09 2e       	mov	r0, r25
 39e:	00 0c       	add	r0, r0
 3a0:	aa 0b       	sbc	r26, r26
 3a2:	bb 0b       	sbc	r27, r27
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	9a 83       	std	Y+2, r25	; 0x02
 3a8:	ab 83       	std	Y+3, r26	; 0x03
 3aa:	bc 83       	std	Y+4, r27	; 0x04
 3ac:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <y>
 3b0:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <y+0x1>
 3b4:	f2 9e       	mul	r15, r18
 3b6:	c0 01       	movw	r24, r0
 3b8:	f3 9e       	mul	r15, r19
 3ba:	90 0d       	add	r25, r0
 3bc:	11 24       	eor	r1, r1
 3be:	09 2e       	mov	r0, r25
 3c0:	00 0c       	add	r0, r0
 3c2:	aa 0b       	sbc	r26, r26
 3c4:	bb 0b       	sbc	r27, r27
 3c6:	8d 83       	std	Y+5, r24	; 0x05
 3c8:	9e 83       	std	Y+6, r25	; 0x06
 3ca:	af 83       	std	Y+7, r26	; 0x07
 3cc:	b8 87       	std	Y+8, r27	; 0x08
 3ce:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <z>
 3d2:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <z+0x1>
 3d6:	f2 9e       	mul	r15, r18
 3d8:	c0 01       	movw	r24, r0
 3da:	f3 9e       	mul	r15, r19
 3dc:	90 0d       	add	r25, r0
 3de:	11 24       	eor	r1, r1
 3e0:	09 2e       	mov	r0, r25
 3e2:	00 0c       	add	r0, r0
 3e4:	aa 0b       	sbc	r26, r26
 3e6:	bb 0b       	sbc	r27, r27
 3e8:	89 87       	std	Y+9, r24	; 0x09
 3ea:	9a 87       	std	Y+10, r25	; 0x0a
 3ec:	ab 87       	std	Y+11, r26	; 0x0b
 3ee:	bc 87       	std	Y+12, r27	; 0x0c
		Stepper_move(status,steps);
 3f0:	be 01       	movw	r22, r28
 3f2:	6f 5f       	subi	r22, 0xFF	; 255
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	ce 01       	movw	r24, r28
 3f8:	0d 96       	adiw	r24, 0x0d	; 13
 3fa:	0e 94 46 04 	call	0x88c	; 0x88c <Stepper_move>
		x=0;
 3fe:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <x+0x1>
 402:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <x>
		y=0;
 406:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <y+0x1>
 40a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <y>
		z=0;
 40e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <z+0x1>
 412:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <z>
	}
 416:	1b cf       	rjmp	.-458    	; 0x24e <main+0x28>

00000418 <STpinChange>:
		case 6:steper_Qstep();break;
		case 8:steper_Estep();break;
		case 16:steper_Sstep();break;
	}
	speed = sp;
}
 418:	67 2b       	or	r22, r23
 41a:	09 f0       	breq	.+2      	; 0x41e <STpinChange+0x6>
 41c:	9f c0       	rjmp	.+318    	; 0x55c <__stack+0xfd>
 41e:	00 97       	sbiw	r24, 0x00	; 0
 420:	11 f4       	brne	.+4      	; 0x426 <STpinChange+0xe>
 422:	d8 98       	cbi	0x1b, 0	; 27
 424:	08 95       	ret
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	91 05       	cpc	r25, r1
 42a:	11 f4       	brne	.+4      	; 0x430 <STpinChange+0x18>
 42c:	d9 98       	cbi	0x1b, 1	; 27
 42e:	08 95       	ret
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	91 05       	cpc	r25, r1
 434:	11 f4       	brne	.+4      	; 0x43a <STpinChange+0x22>
 436:	da 98       	cbi	0x1b, 2	; 27
 438:	08 95       	ret
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	91 05       	cpc	r25, r1
 43e:	11 f4       	brne	.+4      	; 0x444 <STpinChange+0x2c>
 440:	db 98       	cbi	0x1b, 3	; 27
 442:	08 95       	ret
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	91 05       	cpc	r25, r1
 448:	11 f4       	brne	.+4      	; 0x44e <STpinChange+0x36>
 44a:	dc 98       	cbi	0x1b, 4	; 27
 44c:	08 95       	ret
 44e:	85 30       	cpi	r24, 0x05	; 5
 450:	91 05       	cpc	r25, r1
 452:	11 f4       	brne	.+4      	; 0x458 <STpinChange+0x40>
 454:	dd 98       	cbi	0x1b, 5	; 27
 456:	08 95       	ret
 458:	86 30       	cpi	r24, 0x06	; 6
 45a:	91 05       	cpc	r25, r1
 45c:	11 f4       	brne	.+4      	; 0x462 <__stack+0x3>
 45e:	de 98       	cbi	0x1b, 6	; 27
 460:	08 95       	ret
 462:	87 30       	cpi	r24, 0x07	; 7
 464:	91 05       	cpc	r25, r1
 466:	11 f4       	brne	.+4      	; 0x46c <__stack+0xd>
 468:	df 98       	cbi	0x1b, 7	; 27
 46a:	08 95       	ret
 46c:	8a 30       	cpi	r24, 0x0A	; 10
 46e:	91 05       	cpc	r25, r1
 470:	11 f4       	brne	.+4      	; 0x476 <__stack+0x17>
 472:	c0 98       	cbi	0x18, 0	; 24
 474:	08 95       	ret
 476:	8b 30       	cpi	r24, 0x0B	; 11
 478:	91 05       	cpc	r25, r1
 47a:	11 f4       	brne	.+4      	; 0x480 <__stack+0x21>
 47c:	c1 98       	cbi	0x18, 1	; 24
 47e:	08 95       	ret
 480:	8c 30       	cpi	r24, 0x0C	; 12
 482:	91 05       	cpc	r25, r1
 484:	11 f4       	brne	.+4      	; 0x48a <__stack+0x2b>
 486:	c2 98       	cbi	0x18, 2	; 24
 488:	08 95       	ret
 48a:	8d 30       	cpi	r24, 0x0D	; 13
 48c:	91 05       	cpc	r25, r1
 48e:	11 f4       	brne	.+4      	; 0x494 <__stack+0x35>
 490:	c3 98       	cbi	0x18, 3	; 24
 492:	08 95       	ret
 494:	8e 30       	cpi	r24, 0x0E	; 14
 496:	91 05       	cpc	r25, r1
 498:	11 f4       	brne	.+4      	; 0x49e <__stack+0x3f>
 49a:	c4 98       	cbi	0x18, 4	; 24
 49c:	08 95       	ret
 49e:	8f 30       	cpi	r24, 0x0F	; 15
 4a0:	91 05       	cpc	r25, r1
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__stack+0x49>
 4a4:	c5 98       	cbi	0x18, 5	; 24
 4a6:	08 95       	ret
 4a8:	80 31       	cpi	r24, 0x10	; 16
 4aa:	91 05       	cpc	r25, r1
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	c6 98       	cbi	0x18, 6	; 24
 4b0:	08 95       	ret
 4b2:	81 31       	cpi	r24, 0x11	; 17
 4b4:	91 05       	cpc	r25, r1
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__stack+0x5d>
 4b8:	c7 98       	cbi	0x18, 7	; 24
 4ba:	08 95       	ret
 4bc:	84 31       	cpi	r24, 0x14	; 20
 4be:	91 05       	cpc	r25, r1
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__stack+0x67>
 4c2:	a8 98       	cbi	0x15, 0	; 21
 4c4:	08 95       	ret
 4c6:	85 31       	cpi	r24, 0x15	; 21
 4c8:	91 05       	cpc	r25, r1
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__stack+0x71>
 4cc:	a9 98       	cbi	0x15, 1	; 21
 4ce:	08 95       	ret
 4d0:	86 31       	cpi	r24, 0x16	; 22
 4d2:	91 05       	cpc	r25, r1
 4d4:	11 f4       	brne	.+4      	; 0x4da <__stack+0x7b>
 4d6:	aa 98       	cbi	0x15, 2	; 21
 4d8:	08 95       	ret
 4da:	87 31       	cpi	r24, 0x17	; 23
 4dc:	91 05       	cpc	r25, r1
 4de:	11 f4       	brne	.+4      	; 0x4e4 <__stack+0x85>
 4e0:	ab 98       	cbi	0x15, 3	; 21
 4e2:	08 95       	ret
 4e4:	88 31       	cpi	r24, 0x18	; 24
 4e6:	91 05       	cpc	r25, r1
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__stack+0x8f>
 4ea:	ac 98       	cbi	0x15, 4	; 21
 4ec:	08 95       	ret
 4ee:	89 31       	cpi	r24, 0x19	; 25
 4f0:	91 05       	cpc	r25, r1
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__stack+0x99>
 4f4:	ad 98       	cbi	0x15, 5	; 21
 4f6:	08 95       	ret
 4f8:	8a 31       	cpi	r24, 0x1A	; 26
 4fa:	91 05       	cpc	r25, r1
 4fc:	11 f4       	brne	.+4      	; 0x502 <__stack+0xa3>
 4fe:	ae 98       	cbi	0x15, 6	; 21
 500:	08 95       	ret
 502:	8b 31       	cpi	r24, 0x1B	; 27
 504:	91 05       	cpc	r25, r1
 506:	11 f4       	brne	.+4      	; 0x50c <__stack+0xad>
 508:	af 98       	cbi	0x15, 7	; 21
 50a:	08 95       	ret
 50c:	8e 31       	cpi	r24, 0x1E	; 30
 50e:	91 05       	cpc	r25, r1
 510:	11 f4       	brne	.+4      	; 0x516 <__stack+0xb7>
 512:	90 98       	cbi	0x12, 0	; 18
 514:	08 95       	ret
 516:	8f 31       	cpi	r24, 0x1F	; 31
 518:	91 05       	cpc	r25, r1
 51a:	11 f4       	brne	.+4      	; 0x520 <__stack+0xc1>
 51c:	91 98       	cbi	0x12, 1	; 18
 51e:	08 95       	ret
 520:	80 32       	cpi	r24, 0x20	; 32
 522:	91 05       	cpc	r25, r1
 524:	11 f4       	brne	.+4      	; 0x52a <__stack+0xcb>
 526:	92 98       	cbi	0x12, 2	; 18
 528:	08 95       	ret
 52a:	81 32       	cpi	r24, 0x21	; 33
 52c:	91 05       	cpc	r25, r1
 52e:	11 f4       	brne	.+4      	; 0x534 <__stack+0xd5>
 530:	93 98       	cbi	0x12, 3	; 18
 532:	08 95       	ret
 534:	82 32       	cpi	r24, 0x22	; 34
 536:	91 05       	cpc	r25, r1
 538:	11 f4       	brne	.+4      	; 0x53e <__stack+0xdf>
 53a:	94 98       	cbi	0x12, 4	; 18
 53c:	08 95       	ret
 53e:	83 32       	cpi	r24, 0x23	; 35
 540:	91 05       	cpc	r25, r1
 542:	11 f4       	brne	.+4      	; 0x548 <__stack+0xe9>
 544:	95 98       	cbi	0x12, 5	; 18
 546:	08 95       	ret
 548:	84 32       	cpi	r24, 0x24	; 36
 54a:	91 05       	cpc	r25, r1
 54c:	11 f4       	brne	.+4      	; 0x552 <__stack+0xf3>
 54e:	96 98       	cbi	0x12, 6	; 18
 550:	08 95       	ret
 552:	85 97       	sbiw	r24, 0x25	; 37
 554:	09 f0       	breq	.+2      	; 0x558 <__stack+0xf9>
 556:	9f c0       	rjmp	.+318    	; 0x696 <__stack+0x237>
 558:	97 98       	cbi	0x12, 7	; 18
 55a:	08 95       	ret
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	11 f4       	brne	.+4      	; 0x564 <__stack+0x105>
 560:	d8 9a       	sbi	0x1b, 0	; 27
 562:	08 95       	ret
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	91 05       	cpc	r25, r1
 568:	11 f4       	brne	.+4      	; 0x56e <__stack+0x10f>
 56a:	d9 9a       	sbi	0x1b, 1	; 27
 56c:	08 95       	ret
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	11 f4       	brne	.+4      	; 0x578 <__stack+0x119>
 574:	da 9a       	sbi	0x1b, 2	; 27
 576:	08 95       	ret
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	91 05       	cpc	r25, r1
 57c:	11 f4       	brne	.+4      	; 0x582 <__stack+0x123>
 57e:	db 9a       	sbi	0x1b, 3	; 27
 580:	08 95       	ret
 582:	84 30       	cpi	r24, 0x04	; 4
 584:	91 05       	cpc	r25, r1
 586:	11 f4       	brne	.+4      	; 0x58c <__stack+0x12d>
 588:	dc 9a       	sbi	0x1b, 4	; 27
 58a:	08 95       	ret
 58c:	85 30       	cpi	r24, 0x05	; 5
 58e:	91 05       	cpc	r25, r1
 590:	11 f4       	brne	.+4      	; 0x596 <__stack+0x137>
 592:	dd 9a       	sbi	0x1b, 5	; 27
 594:	08 95       	ret
 596:	86 30       	cpi	r24, 0x06	; 6
 598:	91 05       	cpc	r25, r1
 59a:	11 f4       	brne	.+4      	; 0x5a0 <__stack+0x141>
 59c:	de 9a       	sbi	0x1b, 6	; 27
 59e:	08 95       	ret
 5a0:	87 30       	cpi	r24, 0x07	; 7
 5a2:	91 05       	cpc	r25, r1
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__stack+0x14b>
 5a6:	df 9a       	sbi	0x1b, 7	; 27
 5a8:	08 95       	ret
 5aa:	8a 30       	cpi	r24, 0x0A	; 10
 5ac:	91 05       	cpc	r25, r1
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__stack+0x155>
 5b0:	c0 9a       	sbi	0x18, 0	; 24
 5b2:	08 95       	ret
 5b4:	8b 30       	cpi	r24, 0x0B	; 11
 5b6:	91 05       	cpc	r25, r1
 5b8:	11 f4       	brne	.+4      	; 0x5be <__stack+0x15f>
 5ba:	c1 9a       	sbi	0x18, 1	; 24
 5bc:	08 95       	ret
 5be:	8c 30       	cpi	r24, 0x0C	; 12
 5c0:	91 05       	cpc	r25, r1
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__stack+0x169>
 5c4:	c2 9a       	sbi	0x18, 2	; 24
 5c6:	08 95       	ret
 5c8:	8d 30       	cpi	r24, 0x0D	; 13
 5ca:	91 05       	cpc	r25, r1
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__stack+0x173>
 5ce:	c3 9a       	sbi	0x18, 3	; 24
 5d0:	08 95       	ret
 5d2:	8e 30       	cpi	r24, 0x0E	; 14
 5d4:	91 05       	cpc	r25, r1
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__stack+0x17d>
 5d8:	c4 9a       	sbi	0x18, 4	; 24
 5da:	08 95       	ret
 5dc:	8f 30       	cpi	r24, 0x0F	; 15
 5de:	91 05       	cpc	r25, r1
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__stack+0x187>
 5e2:	c5 9a       	sbi	0x18, 5	; 24
 5e4:	08 95       	ret
 5e6:	80 31       	cpi	r24, 0x10	; 16
 5e8:	91 05       	cpc	r25, r1
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <__stack+0x191>
 5ec:	c6 9a       	sbi	0x18, 6	; 24
 5ee:	08 95       	ret
 5f0:	81 31       	cpi	r24, 0x11	; 17
 5f2:	91 05       	cpc	r25, r1
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__stack+0x19b>
 5f6:	c7 9a       	sbi	0x18, 7	; 24
 5f8:	08 95       	ret
 5fa:	84 31       	cpi	r24, 0x14	; 20
 5fc:	91 05       	cpc	r25, r1
 5fe:	11 f4       	brne	.+4      	; 0x604 <__stack+0x1a5>
 600:	a8 9a       	sbi	0x15, 0	; 21
 602:	08 95       	ret
 604:	85 31       	cpi	r24, 0x15	; 21
 606:	91 05       	cpc	r25, r1
 608:	11 f4       	brne	.+4      	; 0x60e <__stack+0x1af>
 60a:	a9 9a       	sbi	0x15, 1	; 21
 60c:	08 95       	ret
 60e:	86 31       	cpi	r24, 0x16	; 22
 610:	91 05       	cpc	r25, r1
 612:	11 f4       	brne	.+4      	; 0x618 <__stack+0x1b9>
 614:	aa 9a       	sbi	0x15, 2	; 21
 616:	08 95       	ret
 618:	87 31       	cpi	r24, 0x17	; 23
 61a:	91 05       	cpc	r25, r1
 61c:	11 f4       	brne	.+4      	; 0x622 <__stack+0x1c3>
 61e:	ab 9a       	sbi	0x15, 3	; 21
 620:	08 95       	ret
 622:	88 31       	cpi	r24, 0x18	; 24
 624:	91 05       	cpc	r25, r1
 626:	11 f4       	brne	.+4      	; 0x62c <__stack+0x1cd>
 628:	ac 9a       	sbi	0x15, 4	; 21
 62a:	08 95       	ret
 62c:	89 31       	cpi	r24, 0x19	; 25
 62e:	91 05       	cpc	r25, r1
 630:	11 f4       	brne	.+4      	; 0x636 <__stack+0x1d7>
 632:	ad 9a       	sbi	0x15, 5	; 21
 634:	08 95       	ret
 636:	8a 31       	cpi	r24, 0x1A	; 26
 638:	91 05       	cpc	r25, r1
 63a:	11 f4       	brne	.+4      	; 0x640 <__stack+0x1e1>
 63c:	ae 9a       	sbi	0x15, 6	; 21
 63e:	08 95       	ret
 640:	8b 31       	cpi	r24, 0x1B	; 27
 642:	91 05       	cpc	r25, r1
 644:	11 f4       	brne	.+4      	; 0x64a <__stack+0x1eb>
 646:	af 9a       	sbi	0x15, 7	; 21
 648:	08 95       	ret
 64a:	8e 31       	cpi	r24, 0x1E	; 30
 64c:	91 05       	cpc	r25, r1
 64e:	11 f4       	brne	.+4      	; 0x654 <__stack+0x1f5>
 650:	90 9a       	sbi	0x12, 0	; 18
 652:	08 95       	ret
 654:	8f 31       	cpi	r24, 0x1F	; 31
 656:	91 05       	cpc	r25, r1
 658:	11 f4       	brne	.+4      	; 0x65e <__stack+0x1ff>
 65a:	91 9a       	sbi	0x12, 1	; 18
 65c:	08 95       	ret
 65e:	80 32       	cpi	r24, 0x20	; 32
 660:	91 05       	cpc	r25, r1
 662:	11 f4       	brne	.+4      	; 0x668 <__stack+0x209>
 664:	92 9a       	sbi	0x12, 2	; 18
 666:	08 95       	ret
 668:	81 32       	cpi	r24, 0x21	; 33
 66a:	91 05       	cpc	r25, r1
 66c:	11 f4       	brne	.+4      	; 0x672 <__stack+0x213>
 66e:	93 9a       	sbi	0x12, 3	; 18
 670:	08 95       	ret
 672:	82 32       	cpi	r24, 0x22	; 34
 674:	91 05       	cpc	r25, r1
 676:	11 f4       	brne	.+4      	; 0x67c <__stack+0x21d>
 678:	94 9a       	sbi	0x12, 4	; 18
 67a:	08 95       	ret
 67c:	83 32       	cpi	r24, 0x23	; 35
 67e:	91 05       	cpc	r25, r1
 680:	11 f4       	brne	.+4      	; 0x686 <__stack+0x227>
 682:	95 9a       	sbi	0x12, 5	; 18
 684:	08 95       	ret
 686:	84 32       	cpi	r24, 0x24	; 36
 688:	91 05       	cpc	r25, r1
 68a:	11 f4       	brne	.+4      	; 0x690 <__stack+0x231>
 68c:	96 9a       	sbi	0x12, 6	; 18
 68e:	08 95       	ret
 690:	85 97       	sbiw	r24, 0x25	; 37
 692:	09 f4       	brne	.+2      	; 0x696 <__stack+0x237>
 694:	97 9a       	sbi	0x12, 7	; 18
 696:	08 95       	ret

00000698 <steper_1step>:
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms1>
 6a0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms1+0x1>
 6a4:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ms2>
 6b0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ms2+0x1>
 6b4:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms3>
 6c0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms3+0x1>
 6c4:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 6c8:	08 95       	ret

000006ca <steper_Hstep>:
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms1>
 6d2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms1+0x1>
 6d6:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ms2>
 6e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ms2+0x1>
 6e6:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms3>
 6f2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms3+0x1>
 6f6:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 6fa:	08 95       	ret

000006fc <steper_Qstep>:
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms1>
 704:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms1+0x1>
 708:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ms2>
 714:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ms2+0x1>
 718:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms3>
 724:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms3+0x1>
 728:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 72c:	08 95       	ret

0000072e <steper_Estep>:
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms1>
 736:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms1+0x1>
 73a:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ms2>
 746:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ms2+0x1>
 74a:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms3>
 756:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms3+0x1>
 75a:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 75e:	08 95       	ret

00000760 <steper_Sstep>:
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms1>
 768:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms1+0x1>
 76c:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ms2>
 778:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ms2+0x1>
 77c:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms3>
 788:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms3+0x1>
 78c:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 790:	08 95       	ret

00000792 <setspeed>:
 792:	bc 01       	movw	r22, r24
 794:	88 ee       	ldi	r24, 0xE8	; 232
 796:	93 e0       	ldi	r25, 0x03	; 3
 798:	0e 94 73 07 	call	0xee6	; 0xee6 <__divmodhi4>
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	4c f4       	brge	.+18     	; 0x7b4 <setspeed+0x22>
 7a2:	8f ec       	ldi	r24, 0xCF	; 207
 7a4:	97 e0       	ldi	r25, 0x07	; 7
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <setspeed+0x14>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <setspeed+0x1a>
 7ac:	00 00       	nop
 7ae:	61 50       	subi	r22, 0x01	; 1
 7b0:	71 09       	sbc	r23, r1
 7b2:	b9 f7       	brne	.-18     	; 0x7a2 <setspeed+0x10>
 7b4:	08 95       	ret

000007b6 <three_stepper_Intiat>:
 7b6:	8f 92       	push	r8
 7b8:	9f 92       	push	r9
 7ba:	af 92       	push	r10
 7bc:	bf 92       	push	r11
 7be:	cf 92       	push	r12
 7c0:	df 92       	push	r13
 7c2:	ef 92       	push	r14
 7c4:	ff 92       	push	r15
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7d4:	f8 89       	ldd	r31, Y+16	; 0x10
 7d6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ms1+0x1>
 7da:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ms1>
 7de:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <ms2+0x1>
 7e2:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <ms2>
 7e6:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <ms3+0x1>
 7ea:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <ms3>
 7ee:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <StepA+0x1>
 7f2:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <StepA>
 7f6:	10 93 1e 01 	sts	0x011E, r17	; 0x80011e <DIRA+0x1>
 7fa:	00 93 1d 01 	sts	0x011D, r16	; 0x80011d <DIRA>
 7fe:	f0 92 20 01 	sts	0x0120, r15	; 0x800120 <StepB+0x1>
 802:	e0 92 1f 01 	sts	0x011F, r14	; 0x80011f <StepB>
 806:	d0 92 12 01 	sts	0x0112, r13	; 0x800112 <DIRB+0x1>
 80a:	c0 92 11 01 	sts	0x0111, r12	; 0x800111 <DIRB>
 80e:	b0 92 0e 01 	sts	0x010E, r11	; 0x80010e <StepC+0x1>
 812:	a0 92 0d 01 	sts	0x010D, r10	; 0x80010d <StepC>
 816:	90 92 22 01 	sts	0x0122, r9	; 0x800122 <DIRC+0x1>
 81a:	80 92 21 01 	sts	0x0121, r8	; 0x800121 <DIRC>
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <no+0x1>
 826:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <no>
 82a:	e6 30       	cpi	r30, 0x06	; 6
 82c:	f1 05       	cpc	r31, r1
 82e:	99 f0       	breq	.+38     	; 0x856 <three_stepper_Intiat+0xa0>
 830:	34 f4       	brge	.+12     	; 0x83e <three_stepper_Intiat+0x88>
 832:	e1 30       	cpi	r30, 0x01	; 1
 834:	f1 05       	cpc	r31, r1
 836:	49 f0       	breq	.+18     	; 0x84a <three_stepper_Intiat+0x94>
 838:	32 97       	sbiw	r30, 0x02	; 2
 83a:	51 f0       	breq	.+20     	; 0x850 <three_stepper_Intiat+0x9a>
 83c:	14 c0       	rjmp	.+40     	; 0x866 <three_stepper_Intiat+0xb0>
 83e:	e8 30       	cpi	r30, 0x08	; 8
 840:	f1 05       	cpc	r31, r1
 842:	61 f0       	breq	.+24     	; 0x85c <three_stepper_Intiat+0xa6>
 844:	70 97       	sbiw	r30, 0x10	; 16
 846:	69 f0       	breq	.+26     	; 0x862 <three_stepper_Intiat+0xac>
 848:	0e c0       	rjmp	.+28     	; 0x866 <three_stepper_Intiat+0xb0>
 84a:	0e 94 4c 03 	call	0x698	; 0x698 <steper_1step>
 84e:	0b c0       	rjmp	.+22     	; 0x866 <three_stepper_Intiat+0xb0>
 850:	0e 94 65 03 	call	0x6ca	; 0x6ca <steper_Hstep>
 854:	08 c0       	rjmp	.+16     	; 0x866 <three_stepper_Intiat+0xb0>
 856:	0e 94 7e 03 	call	0x6fc	; 0x6fc <steper_Qstep>
 85a:	05 c0       	rjmp	.+10     	; 0x866 <three_stepper_Intiat+0xb0>
 85c:	0e 94 97 03 	call	0x72e	; 0x72e <steper_Estep>
 860:	02 c0       	rjmp	.+4      	; 0x866 <three_stepper_Intiat+0xb0>
 862:	0e 94 b0 03 	call	0x760	; 0x760 <steper_Sstep>
 866:	89 89       	ldd	r24, Y+17	; 0x11
 868:	9a 89       	ldd	r25, Y+18	; 0x12
 86a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <speed+0x1>
 86e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <speed>
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	0f 91       	pop	r16
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	df 90       	pop	r13
 880:	cf 90       	pop	r12
 882:	bf 90       	pop	r11
 884:	af 90       	pop	r10
 886:	9f 90       	pop	r9
 888:	8f 90       	pop	r8
 88a:	08 95       	ret

0000088c <Stepper_move>:
void Stepper_move(bool clockw[],long NuOfSteps[])
{
 88c:	8f 92       	push	r8
 88e:	9f 92       	push	r9
 890:	af 92       	push	r10
 892:	bf 92       	push	r11
 894:	cf 92       	push	r12
 896:	df 92       	push	r13
 898:	ef 92       	push	r14
 89a:	ff 92       	push	r15
 89c:	0f 93       	push	r16
 89e:	1f 93       	push	r17
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	8c 01       	movw	r16, r24
 8a6:	eb 01       	movw	r28, r22
	if (no == 1)
 8a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <no>
 8ac:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <no+0x1>
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	91 05       	cpc	r25, r1
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <Stepper_move+0x2c>
 8b6:	4a c0       	rjmp	.+148    	; 0x94c <Stepper_move+0xc0>
	{
		if (clockw[0])
 8b8:	f8 01       	movw	r30, r16
 8ba:	80 81       	ld	r24, Z
 8bc:	88 23       	and	r24, r24
 8be:	49 f0       	breq	.+18     	; 0x8d2 <Stepper_move+0x46>
		{
			STpinChange(DIRA,1);
 8c0:	61 e0       	ldi	r22, 0x01	; 1
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 8c8:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 8cc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <Stepper_move+0x56>
		}
		else
		{
			STpinChange(DIRA,0);
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 8da:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 8de:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		while ((NuOfSteps[0]) != 0)
 8e2:	88 81       	ld	r24, Y
 8e4:	99 81       	ldd	r25, Y+1	; 0x01
 8e6:	aa 81       	ldd	r26, Y+2	; 0x02
 8e8:	bb 81       	ldd	r27, Y+3	; 0x03
 8ea:	89 2b       	or	r24, r25
 8ec:	8a 2b       	or	r24, r26
 8ee:	8b 2b       	or	r24, r27
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <Stepper_move+0x68>
 8f2:	c2 c2       	rjmp	.+1412   	; 0xe78 <Stepper_move+0x5ec>
		{
		STpinChange(StepA,1);
 8f4:	61 e0       	ldi	r22, 0x01	; 1
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 8fc:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 900:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		setspeed(speed);
 904:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <speed>
 908:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <speed+0x1>
 90c:	0e 94 c9 03 	call	0x792	; 0x792 <setspeed>
		STpinChange(StepA,0);
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 918:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 91c:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 920:	87 ec       	ldi	r24, 0xC7	; 199
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	01 97       	sbiw	r24, 0x01	; 1
 926:	f1 f7       	brne	.-4      	; 0x924 <Stepper_move+0x98>
 928:	00 c0       	rjmp	.+0      	; 0x92a <Stepper_move+0x9e>
 92a:	00 00       	nop
		_delay_us (50);
		NuOfSteps[0] -= 1;
 92c:	88 81       	ld	r24, Y
 92e:	99 81       	ldd	r25, Y+1	; 0x01
 930:	aa 81       	ldd	r26, Y+2	; 0x02
 932:	bb 81       	ldd	r27, Y+3	; 0x03
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	a1 09       	sbc	r26, r1
 938:	b1 09       	sbc	r27, r1
 93a:	88 83       	st	Y, r24
 93c:	99 83       	std	Y+1, r25	; 0x01
 93e:	aa 83       	std	Y+2, r26	; 0x02
 940:	bb 83       	std	Y+3, r27	; 0x03
		}
		else
		{
			STpinChange(DIRA,0);
		}
		while ((NuOfSteps[0]) != 0)
 942:	89 2b       	or	r24, r25
 944:	8a 2b       	or	r24, r26
 946:	8b 2b       	or	r24, r27
 948:	a9 f6       	brne	.-86     	; 0x8f4 <Stepper_move+0x68>
 94a:	96 c2       	rjmp	.+1324   	; 0xe78 <Stepper_move+0x5ec>
		STpinChange(StepA,0);
		_delay_us (50);
		NuOfSteps[0] -= 1;
		}
	} 
	else if (no == 2)
 94c:	82 30       	cpi	r24, 0x02	; 2
 94e:	91 05       	cpc	r25, r1
 950:	09 f0       	breq	.+2      	; 0x954 <Stepper_move+0xc8>
 952:	93 c0       	rjmp	.+294    	; 0xa7a <Stepper_move+0x1ee>
	{
		if (clockw[0])
 954:	f8 01       	movw	r30, r16
 956:	80 81       	ld	r24, Z
 958:	88 23       	and	r24, r24
 95a:	49 f0       	breq	.+18     	; 0x96e <Stepper_move+0xe2>
		{
			STpinChange(DIRA,1);
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 964:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 968:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 96c:	08 c0       	rjmp	.+16     	; 0x97e <Stepper_move+0xf2>
		}
		else
		{
			STpinChange(DIRA,0);
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 976:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 97a:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		if (clockw[1])
 97e:	f8 01       	movw	r30, r16
 980:	81 81       	ldd	r24, Z+1	; 0x01
 982:	88 23       	and	r24, r24
 984:	49 f0       	breq	.+18     	; 0x998 <Stepper_move+0x10c>
		{
			STpinChange(DIRB,1);
 986:	61 e0       	ldi	r22, 0x01	; 1
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DIRB>
 98e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <DIRB+0x1>
 992:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 996:	08 c0       	rjmp	.+16     	; 0x9a8 <Stepper_move+0x11c>
		}
		else
		{
			STpinChange(DIRB,0);
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	70 e0       	ldi	r23, 0x00	; 0
 99c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DIRB>
 9a0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <DIRB+0x1>
 9a4:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
	while ((NuOfSteps[0] & NuOfSteps[1]) != 0)
 9a8:	48 81       	ld	r20, Y
 9aa:	59 81       	ldd	r21, Y+1	; 0x01
 9ac:	6a 81       	ldd	r22, Y+2	; 0x02
 9ae:	7b 81       	ldd	r23, Y+3	; 0x03
 9b0:	8c 81       	ldd	r24, Y+4	; 0x04
 9b2:	9d 81       	ldd	r25, Y+5	; 0x05
 9b4:	ae 81       	ldd	r26, Y+6	; 0x06
 9b6:	bf 81       	ldd	r27, Y+7	; 0x07
 9b8:	84 23       	and	r24, r20
 9ba:	95 23       	and	r25, r21
 9bc:	a6 23       	and	r26, r22
 9be:	b7 23       	and	r27, r23
 9c0:	89 2b       	or	r24, r25
 9c2:	8a 2b       	or	r24, r26
 9c4:	8b 2b       	or	r24, r27
 9c6:	09 f4       	brne	.+2      	; 0x9ca <Stepper_move+0x13e>
 9c8:	57 c2       	rjmp	.+1198   	; 0xe78 <Stepper_move+0x5ec>
	{
		if (NuOfSteps[0] != 0)
 9ca:	45 2b       	or	r20, r21
 9cc:	46 2b       	or	r20, r22
 9ce:	47 2b       	or	r20, r23
 9d0:	49 f0       	breq	.+18     	; 0x9e4 <Stepper_move+0x158>
		{
			STpinChange(StepA,1);
 9d2:	61 e0       	ldi	r22, 0x01	; 1
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 9da:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 9de:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 9e2:	04 c0       	rjmp	.+8      	; 0x9ec <Stepper_move+0x160>
		}
		else
			NuOfSteps[0] = 0;
 9e4:	18 82       	st	Y, r1
 9e6:	19 82       	std	Y+1, r1	; 0x01
 9e8:	1a 82       	std	Y+2, r1	; 0x02
 9ea:	1b 82       	std	Y+3, r1	; 0x03
		if (NuOfSteps[1] != 0)
 9ec:	8c 81       	ldd	r24, Y+4	; 0x04
 9ee:	9d 81       	ldd	r25, Y+5	; 0x05
 9f0:	ae 81       	ldd	r26, Y+6	; 0x06
 9f2:	bf 81       	ldd	r27, Y+7	; 0x07
 9f4:	89 2b       	or	r24, r25
 9f6:	8a 2b       	or	r24, r26
 9f8:	8b 2b       	or	r24, r27
 9fa:	41 f0       	breq	.+16     	; 0xa0c <Stepper_move+0x180>
		{
			STpinChange(StepB,1);
 9fc:	61 e0       	ldi	r22, 0x01	; 1
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <StepB>
 a04:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <StepB+0x1>
 a08:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		else
			NuOfSteps[1] = 0;
		setspeed(speed);
 a0c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <speed>
 a10:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <speed+0x1>
 a14:	0e 94 c9 03 	call	0x792	; 0x792 <setspeed>
		STpinChange(StepA,0);
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 a20:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 a24:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		STpinChange(StepB,0);
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <StepB>
 a30:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <StepB+0x1>
 a34:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		NuOfSteps[0] -= 1;
 a38:	48 81       	ld	r20, Y
 a3a:	59 81       	ldd	r21, Y+1	; 0x01
 a3c:	6a 81       	ldd	r22, Y+2	; 0x02
 a3e:	7b 81       	ldd	r23, Y+3	; 0x03
 a40:	41 50       	subi	r20, 0x01	; 1
 a42:	51 09       	sbc	r21, r1
 a44:	61 09       	sbc	r22, r1
 a46:	71 09       	sbc	r23, r1
 a48:	48 83       	st	Y, r20
 a4a:	59 83       	std	Y+1, r21	; 0x01
 a4c:	6a 83       	std	Y+2, r22	; 0x02
 a4e:	7b 83       	std	Y+3, r23	; 0x03
		NuOfSteps[1] -= 1;
 a50:	8c 81       	ldd	r24, Y+4	; 0x04
 a52:	9d 81       	ldd	r25, Y+5	; 0x05
 a54:	ae 81       	ldd	r26, Y+6	; 0x06
 a56:	bf 81       	ldd	r27, Y+7	; 0x07
 a58:	01 97       	sbiw	r24, 0x01	; 1
 a5a:	a1 09       	sbc	r26, r1
 a5c:	b1 09       	sbc	r27, r1
 a5e:	8c 83       	std	Y+4, r24	; 0x04
 a60:	9d 83       	std	Y+5, r25	; 0x05
 a62:	ae 83       	std	Y+6, r26	; 0x06
 a64:	bf 83       	std	Y+7, r27	; 0x07
		}
		else
		{
			STpinChange(DIRB,0);
		}
	while ((NuOfSteps[0] & NuOfSteps[1]) != 0)
 a66:	84 23       	and	r24, r20
 a68:	95 23       	and	r25, r21
 a6a:	a6 23       	and	r26, r22
 a6c:	b7 23       	and	r27, r23
 a6e:	89 2b       	or	r24, r25
 a70:	8a 2b       	or	r24, r26
 a72:	8b 2b       	or	r24, r27
 a74:	09 f0       	breq	.+2      	; 0xa78 <Stepper_move+0x1ec>
 a76:	a9 cf       	rjmp	.-174    	; 0x9ca <Stepper_move+0x13e>
 a78:	ff c1       	rjmp	.+1022   	; 0xe78 <Stepper_move+0x5ec>
		STpinChange(StepB,0);
		NuOfSteps[0] -= 1;
		NuOfSteps[1] -= 1;
	}
	}
	else if (no == 3)
 a7a:	83 30       	cpi	r24, 0x03	; 3
 a7c:	91 05       	cpc	r25, r1
 a7e:	09 f0       	breq	.+2      	; 0xa82 <Stepper_move+0x1f6>
 a80:	d8 c0       	rjmp	.+432    	; 0xc32 <Stepper_move+0x3a6>
	{
		if (clockw[0])
 a82:	f8 01       	movw	r30, r16
 a84:	80 81       	ld	r24, Z
 a86:	88 23       	and	r24, r24
 a88:	49 f0       	breq	.+18     	; 0xa9c <Stepper_move+0x210>
		{
			STpinChange(DIRA,1);
 a8a:	61 e0       	ldi	r22, 0x01	; 1
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 a92:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 a96:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 a9a:	08 c0       	rjmp	.+16     	; 0xaac <Stepper_move+0x220>
		}
		else
		{
			STpinChange(DIRA,0);
 a9c:	60 e0       	ldi	r22, 0x00	; 0
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 aa4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 aa8:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		if (clockw[1])
 aac:	f8 01       	movw	r30, r16
 aae:	81 81       	ldd	r24, Z+1	; 0x01
 ab0:	88 23       	and	r24, r24
 ab2:	49 f0       	breq	.+18     	; 0xac6 <Stepper_move+0x23a>
		{
			STpinChange(DIRB,1);
 ab4:	61 e0       	ldi	r22, 0x01	; 1
 ab6:	70 e0       	ldi	r23, 0x00	; 0
 ab8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DIRB>
 abc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <DIRB+0x1>
 ac0:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 ac4:	08 c0       	rjmp	.+16     	; 0xad6 <Stepper_move+0x24a>
		}
		else
		{
			STpinChange(DIRB,0);
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DIRB>
 ace:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <DIRB+0x1>
 ad2:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		if (clockw[2])
 ad6:	f8 01       	movw	r30, r16
 ad8:	82 81       	ldd	r24, Z+2	; 0x02
 ada:	88 23       	and	r24, r24
 adc:	49 f0       	breq	.+18     	; 0xaf0 <Stepper_move+0x264>
		{
			STpinChange(DIRC,1);
 ade:	61 e0       	ldi	r22, 0x01	; 1
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <DIRC>
 ae6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <DIRC+0x1>
 aea:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <Stepper_move+0x274>
		}
		else
		{
			STpinChange(DIRC,0);
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <DIRC>
 af8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <DIRC+0x1>
 afc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
	while ((NuOfSteps[0] & NuOfSteps[1] & NuOfSteps[2]) != 0)
 b00:	08 81       	ld	r16, Y
 b02:	19 81       	ldd	r17, Y+1	; 0x01
 b04:	2a 81       	ldd	r18, Y+2	; 0x02
 b06:	3b 81       	ldd	r19, Y+3	; 0x03
 b08:	8c 81       	ldd	r24, Y+4	; 0x04
 b0a:	9d 81       	ldd	r25, Y+5	; 0x05
 b0c:	ae 81       	ldd	r26, Y+6	; 0x06
 b0e:	bf 81       	ldd	r27, Y+7	; 0x07
 b10:	80 23       	and	r24, r16
 b12:	91 23       	and	r25, r17
 b14:	a2 23       	and	r26, r18
 b16:	b3 23       	and	r27, r19
 b18:	48 85       	ldd	r20, Y+8	; 0x08
 b1a:	59 85       	ldd	r21, Y+9	; 0x09
 b1c:	6a 85       	ldd	r22, Y+10	; 0x0a
 b1e:	7b 85       	ldd	r23, Y+11	; 0x0b
 b20:	84 23       	and	r24, r20
 b22:	95 23       	and	r25, r21
 b24:	a6 23       	and	r26, r22
 b26:	b7 23       	and	r27, r23
 b28:	89 2b       	or	r24, r25
 b2a:	8a 2b       	or	r24, r26
 b2c:	8b 2b       	or	r24, r27
 b2e:	09 f4       	brne	.+2      	; 0xb32 <Stepper_move+0x2a6>
 b30:	a3 c1       	rjmp	.+838    	; 0xe78 <Stepper_move+0x5ec>
	{
		if (NuOfSteps[0] != 0)
 b32:	01 2b       	or	r16, r17
 b34:	02 2b       	or	r16, r18
 b36:	03 2b       	or	r16, r19
 b38:	49 f0       	breq	.+18     	; 0xb4c <Stepper_move+0x2c0>
		{
			STpinChange(StepA,1);
 b3a:	61 e0       	ldi	r22, 0x01	; 1
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 b42:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 b46:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <Stepper_move+0x2c8>
		}
		else
			NuOfSteps[0] = 0;
 b4c:	18 82       	st	Y, r1
 b4e:	19 82       	std	Y+1, r1	; 0x01
 b50:	1a 82       	std	Y+2, r1	; 0x02
 b52:	1b 82       	std	Y+3, r1	; 0x03
		if (NuOfSteps[1] != 0)
 b54:	8c 81       	ldd	r24, Y+4	; 0x04
 b56:	9d 81       	ldd	r25, Y+5	; 0x05
 b58:	ae 81       	ldd	r26, Y+6	; 0x06
 b5a:	bf 81       	ldd	r27, Y+7	; 0x07
 b5c:	89 2b       	or	r24, r25
 b5e:	8a 2b       	or	r24, r26
 b60:	8b 2b       	or	r24, r27
 b62:	41 f0       	breq	.+16     	; 0xb74 <Stepper_move+0x2e8>
		{
			STpinChange(StepB,1);
 b64:	61 e0       	ldi	r22, 0x01	; 1
 b66:	70 e0       	ldi	r23, 0x00	; 0
 b68:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <StepB>
 b6c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <StepB+0x1>
 b70:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		else
			NuOfSteps[1] = 0;
		if (NuOfSteps[2] != 0)
 b74:	88 85       	ldd	r24, Y+8	; 0x08
 b76:	99 85       	ldd	r25, Y+9	; 0x09
 b78:	aa 85       	ldd	r26, Y+10	; 0x0a
 b7a:	bb 85       	ldd	r27, Y+11	; 0x0b
 b7c:	89 2b       	or	r24, r25
 b7e:	8a 2b       	or	r24, r26
 b80:	8b 2b       	or	r24, r27
 b82:	41 f0       	breq	.+16     	; 0xb94 <Stepper_move+0x308>
		{
			STpinChange(StepC,1);
 b84:	61 e0       	ldi	r22, 0x01	; 1
 b86:	70 e0       	ldi	r23, 0x00	; 0
 b88:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <StepC>
 b8c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <StepC+0x1>
 b90:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		else
			NuOfSteps[2] = 0;
		setspeed(speed);
 b94:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <speed>
 b98:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <speed+0x1>
 b9c:	0e 94 c9 03 	call	0x792	; 0x792 <setspeed>
		STpinChange(StepA,0);
 ba0:	60 e0       	ldi	r22, 0x00	; 0
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 ba8:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 bac:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		STpinChange(StepB,0);
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <StepB>
 bb8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <StepB+0x1>
 bbc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		STpinChange(StepC,0);
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <StepC>
 bc8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <StepC+0x1>
 bcc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		NuOfSteps[0] -= 1;
 bd0:	08 81       	ld	r16, Y
 bd2:	19 81       	ldd	r17, Y+1	; 0x01
 bd4:	2a 81       	ldd	r18, Y+2	; 0x02
 bd6:	3b 81       	ldd	r19, Y+3	; 0x03
 bd8:	01 50       	subi	r16, 0x01	; 1
 bda:	11 09       	sbc	r17, r1
 bdc:	21 09       	sbc	r18, r1
 bde:	31 09       	sbc	r19, r1
 be0:	08 83       	st	Y, r16
 be2:	19 83       	std	Y+1, r17	; 0x01
 be4:	2a 83       	std	Y+2, r18	; 0x02
 be6:	3b 83       	std	Y+3, r19	; 0x03
		NuOfSteps[1] -= 1;
 be8:	4c 81       	ldd	r20, Y+4	; 0x04
 bea:	5d 81       	ldd	r21, Y+5	; 0x05
 bec:	6e 81       	ldd	r22, Y+6	; 0x06
 bee:	7f 81       	ldd	r23, Y+7	; 0x07
 bf0:	41 50       	subi	r20, 0x01	; 1
 bf2:	51 09       	sbc	r21, r1
 bf4:	61 09       	sbc	r22, r1
 bf6:	71 09       	sbc	r23, r1
 bf8:	4c 83       	std	Y+4, r20	; 0x04
 bfa:	5d 83       	std	Y+5, r21	; 0x05
 bfc:	6e 83       	std	Y+6, r22	; 0x06
 bfe:	7f 83       	std	Y+7, r23	; 0x07
		NuOfSteps[2] -= 1;
 c00:	88 85       	ldd	r24, Y+8	; 0x08
 c02:	99 85       	ldd	r25, Y+9	; 0x09
 c04:	aa 85       	ldd	r26, Y+10	; 0x0a
 c06:	bb 85       	ldd	r27, Y+11	; 0x0b
 c08:	01 97       	sbiw	r24, 0x01	; 1
 c0a:	a1 09       	sbc	r26, r1
 c0c:	b1 09       	sbc	r27, r1
 c0e:	88 87       	std	Y+8, r24	; 0x08
 c10:	99 87       	std	Y+9, r25	; 0x09
 c12:	aa 87       	std	Y+10, r26	; 0x0a
 c14:	bb 87       	std	Y+11, r27	; 0x0b
		}
		else
		{
			STpinChange(DIRC,0);
		}
	while ((NuOfSteps[0] & NuOfSteps[1] & NuOfSteps[2]) != 0)
 c16:	40 23       	and	r20, r16
 c18:	51 23       	and	r21, r17
 c1a:	62 23       	and	r22, r18
 c1c:	73 23       	and	r23, r19
 c1e:	84 23       	and	r24, r20
 c20:	95 23       	and	r25, r21
 c22:	a6 23       	and	r26, r22
 c24:	b7 23       	and	r27, r23
 c26:	89 2b       	or	r24, r25
 c28:	8a 2b       	or	r24, r26
 c2a:	8b 2b       	or	r24, r27
 c2c:	09 f0       	breq	.+2      	; 0xc30 <Stepper_move+0x3a4>
 c2e:	81 cf       	rjmp	.-254    	; 0xb32 <Stepper_move+0x2a6>
 c30:	23 c1       	rjmp	.+582    	; 0xe78 <Stepper_move+0x5ec>
		NuOfSteps[0] -= 1;
		NuOfSteps[1] -= 1;
		NuOfSteps[2] -= 1;
	}
	}
	else if (no == 4)
 c32:	04 97       	sbiw	r24, 0x04	; 4
 c34:	09 f0       	breq	.+2      	; 0xc38 <Stepper_move+0x3ac>
 c36:	20 c1       	rjmp	.+576    	; 0xe78 <Stepper_move+0x5ec>
	{
		if (clockw[0])
 c38:	f8 01       	movw	r30, r16
 c3a:	80 81       	ld	r24, Z
 c3c:	88 23       	and	r24, r24
 c3e:	49 f0       	breq	.+18     	; 0xc52 <Stepper_move+0x3c6>
		{
			STpinChange(DIRA,1);
 c40:	61 e0       	ldi	r22, 0x01	; 1
 c42:	70 e0       	ldi	r23, 0x00	; 0
 c44:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 c48:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 c4c:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 c50:	08 c0       	rjmp	.+16     	; 0xc62 <Stepper_move+0x3d6>
		}
		else
		{
			STpinChange(DIRA,0);
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	70 e0       	ldi	r23, 0x00	; 0
 c56:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DIRA>
 c5a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DIRA+0x1>
 c5e:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		if (clockw[1])
 c62:	f8 01       	movw	r30, r16
 c64:	81 81       	ldd	r24, Z+1	; 0x01
 c66:	88 23       	and	r24, r24
 c68:	49 f0       	breq	.+18     	; 0xc7c <Stepper_move+0x3f0>
		{
			STpinChange(DIRB,1);
 c6a:	61 e0       	ldi	r22, 0x01	; 1
 c6c:	70 e0       	ldi	r23, 0x00	; 0
 c6e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DIRB>
 c72:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <DIRB+0x1>
 c76:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 c7a:	08 c0       	rjmp	.+16     	; 0xc8c <Stepper_move+0x400>
		}
		else
		{
			STpinChange(DIRB,0);
 c7c:	60 e0       	ldi	r22, 0x00	; 0
 c7e:	70 e0       	ldi	r23, 0x00	; 0
 c80:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DIRB>
 c84:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <DIRB+0x1>
 c88:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		if (clockw[2])
 c8c:	f8 01       	movw	r30, r16
 c8e:	82 81       	ldd	r24, Z+2	; 0x02
 c90:	88 23       	and	r24, r24
 c92:	49 f0       	breq	.+18     	; 0xca6 <Stepper_move+0x41a>
		{
			STpinChange(DIRC,1);
 c94:	61 e0       	ldi	r22, 0x01	; 1
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <DIRC>
 c9c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <DIRC+0x1>
 ca0:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <Stepper_move+0x42a>
		}
		else
		{
			STpinChange(DIRC,0);
 ca6:	60 e0       	ldi	r22, 0x00	; 0
 ca8:	70 e0       	ldi	r23, 0x00	; 0
 caa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <DIRC>
 cae:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <DIRC+0x1>
 cb2:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		if (clockw[3])
 cb6:	f8 01       	movw	r30, r16
 cb8:	83 81       	ldd	r24, Z+3	; 0x03
 cba:	88 23       	and	r24, r24
 cbc:	49 f0       	breq	.+18     	; 0xcd0 <Stepper_move+0x444>
		{
			STpinChange(DIRD,1);
 cbe:	61 e0       	ldi	r22, 0x01	; 1
 cc0:	70 e0       	ldi	r23, 0x00	; 0
 cc2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIRD>
 cc6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <DIRD+0x1>
 cca:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 cce:	08 c0       	rjmp	.+16     	; 0xce0 <Stepper_move+0x454>
		}
		else
		{
			STpinChange(DIRD,0);
 cd0:	60 e0       	ldi	r22, 0x00	; 0
 cd2:	70 e0       	ldi	r23, 0x00	; 0
 cd4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIRD>
 cd8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <DIRD+0x1>
 cdc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
		}
		while ((NuOfSteps[0] & NuOfSteps[1] & NuOfSteps[2] & NuOfSteps[3]) != 0)
 ce0:	c8 80       	ld	r12, Y
 ce2:	d9 80       	ldd	r13, Y+1	; 0x01
 ce4:	ea 80       	ldd	r14, Y+2	; 0x02
 ce6:	fb 80       	ldd	r15, Y+3	; 0x03
 ce8:	8c 81       	ldd	r24, Y+4	; 0x04
 cea:	9d 81       	ldd	r25, Y+5	; 0x05
 cec:	ae 81       	ldd	r26, Y+6	; 0x06
 cee:	bf 81       	ldd	r27, Y+7	; 0x07
 cf0:	8c 21       	and	r24, r12
 cf2:	9d 21       	and	r25, r13
 cf4:	ae 21       	and	r26, r14
 cf6:	bf 21       	and	r27, r15
 cf8:	48 85       	ldd	r20, Y+8	; 0x08
 cfa:	59 85       	ldd	r21, Y+9	; 0x09
 cfc:	6a 85       	ldd	r22, Y+10	; 0x0a
 cfe:	7b 85       	ldd	r23, Y+11	; 0x0b
 d00:	84 23       	and	r24, r20
 d02:	95 23       	and	r25, r21
 d04:	a6 23       	and	r26, r22
 d06:	b7 23       	and	r27, r23
 d08:	4c 85       	ldd	r20, Y+12	; 0x0c
 d0a:	5d 85       	ldd	r21, Y+13	; 0x0d
 d0c:	6e 85       	ldd	r22, Y+14	; 0x0e
 d0e:	7f 85       	ldd	r23, Y+15	; 0x0f
 d10:	84 23       	and	r24, r20
 d12:	95 23       	and	r25, r21
 d14:	a6 23       	and	r26, r22
 d16:	b7 23       	and	r27, r23
 d18:	89 2b       	or	r24, r25
 d1a:	8a 2b       	or	r24, r26
 d1c:	8b 2b       	or	r24, r27
 d1e:	09 f4       	brne	.+2      	; 0xd22 <Stepper_move+0x496>
 d20:	ab c0       	rjmp	.+342    	; 0xe78 <Stepper_move+0x5ec>
		{
			if (NuOfSteps[0] != 0)
 d22:	cd 28       	or	r12, r13
 d24:	ce 28       	or	r12, r14
 d26:	cf 28       	or	r12, r15
 d28:	49 f0       	breq	.+18     	; 0xd3c <Stepper_move+0x4b0>
			{
				STpinChange(StepA,1);
 d2a:	61 e0       	ldi	r22, 0x01	; 1
 d2c:	70 e0       	ldi	r23, 0x00	; 0
 d2e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 d32:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 d36:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
 d3a:	04 c0       	rjmp	.+8      	; 0xd44 <Stepper_move+0x4b8>
			}
			else
			NuOfSteps[0] = 0;
 d3c:	18 82       	st	Y, r1
 d3e:	19 82       	std	Y+1, r1	; 0x01
 d40:	1a 82       	std	Y+2, r1	; 0x02
 d42:	1b 82       	std	Y+3, r1	; 0x03
			if (NuOfSteps[1] != 0)
 d44:	8c 81       	ldd	r24, Y+4	; 0x04
 d46:	9d 81       	ldd	r25, Y+5	; 0x05
 d48:	ae 81       	ldd	r26, Y+6	; 0x06
 d4a:	bf 81       	ldd	r27, Y+7	; 0x07
 d4c:	89 2b       	or	r24, r25
 d4e:	8a 2b       	or	r24, r26
 d50:	8b 2b       	or	r24, r27
 d52:	41 f0       	breq	.+16     	; 0xd64 <Stepper_move+0x4d8>
			{
				STpinChange(StepB,1);
 d54:	61 e0       	ldi	r22, 0x01	; 1
 d56:	70 e0       	ldi	r23, 0x00	; 0
 d58:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <StepB>
 d5c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <StepB+0x1>
 d60:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			}
			else
			NuOfSteps[1] = 0;
			if (NuOfSteps[2] != 0)
 d64:	88 85       	ldd	r24, Y+8	; 0x08
 d66:	99 85       	ldd	r25, Y+9	; 0x09
 d68:	aa 85       	ldd	r26, Y+10	; 0x0a
 d6a:	bb 85       	ldd	r27, Y+11	; 0x0b
 d6c:	89 2b       	or	r24, r25
 d6e:	8a 2b       	or	r24, r26
 d70:	8b 2b       	or	r24, r27
 d72:	41 f0       	breq	.+16     	; 0xd84 <Stepper_move+0x4f8>
			{
				STpinChange(StepC,1);
 d74:	61 e0       	ldi	r22, 0x01	; 1
 d76:	70 e0       	ldi	r23, 0x00	; 0
 d78:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <StepC>
 d7c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <StepC+0x1>
 d80:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			}
			else
			NuOfSteps[2] = 0;
			if (NuOfSteps[3] != 0)
 d84:	8c 85       	ldd	r24, Y+12	; 0x0c
 d86:	9d 85       	ldd	r25, Y+13	; 0x0d
 d88:	ae 85       	ldd	r26, Y+14	; 0x0e
 d8a:	bf 85       	ldd	r27, Y+15	; 0x0f
 d8c:	89 2b       	or	r24, r25
 d8e:	8a 2b       	or	r24, r26
 d90:	8b 2b       	or	r24, r27
 d92:	41 f0       	breq	.+16     	; 0xda4 <Stepper_move+0x518>
			{
				STpinChange(StepD,1);
 d94:	61 e0       	ldi	r22, 0x01	; 1
 d96:	70 e0       	ldi	r23, 0x00	; 0
 d98:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <StepD>
 d9c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <StepD+0x1>
 da0:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			}
			else
			NuOfSteps[3] = 0;
			setspeed(speed);
 da4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <speed>
 da8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <speed+0x1>
 dac:	0e 94 c9 03 	call	0x792	; 0x792 <setspeed>
			STpinChange(StepA,0);
 db0:	60 e0       	ldi	r22, 0x00	; 0
 db2:	70 e0       	ldi	r23, 0x00	; 0
 db4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <StepA>
 db8:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <StepA+0x1>
 dbc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			STpinChange(StepB,0);
 dc0:	60 e0       	ldi	r22, 0x00	; 0
 dc2:	70 e0       	ldi	r23, 0x00	; 0
 dc4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <StepB>
 dc8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <StepB+0x1>
 dcc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			STpinChange(StepC,0);
 dd0:	60 e0       	ldi	r22, 0x00	; 0
 dd2:	70 e0       	ldi	r23, 0x00	; 0
 dd4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <StepC>
 dd8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <StepC+0x1>
 ddc:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			STpinChange(StepD,0);
 de0:	60 e0       	ldi	r22, 0x00	; 0
 de2:	70 e0       	ldi	r23, 0x00	; 0
 de4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <StepD>
 de8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <StepD+0x1>
 dec:	0e 94 0c 02 	call	0x418	; 0x418 <STpinChange>
			NuOfSteps[0] -= 1;
 df0:	c8 80       	ld	r12, Y
 df2:	d9 80       	ldd	r13, Y+1	; 0x01
 df4:	ea 80       	ldd	r14, Y+2	; 0x02
 df6:	fb 80       	ldd	r15, Y+3	; 0x03
 df8:	f1 e0       	ldi	r31, 0x01	; 1
 dfa:	cf 1a       	sub	r12, r31
 dfc:	d1 08       	sbc	r13, r1
 dfe:	e1 08       	sbc	r14, r1
 e00:	f1 08       	sbc	r15, r1
 e02:	c8 82       	st	Y, r12
 e04:	d9 82       	std	Y+1, r13	; 0x01
 e06:	ea 82       	std	Y+2, r14	; 0x02
 e08:	fb 82       	std	Y+3, r15	; 0x03
			NuOfSteps[1] -= 1;
 e0a:	8c 80       	ldd	r8, Y+4	; 0x04
 e0c:	9d 80       	ldd	r9, Y+5	; 0x05
 e0e:	ae 80       	ldd	r10, Y+6	; 0x06
 e10:	bf 80       	ldd	r11, Y+7	; 0x07
 e12:	81 e0       	ldi	r24, 0x01	; 1
 e14:	88 1a       	sub	r8, r24
 e16:	91 08       	sbc	r9, r1
 e18:	a1 08       	sbc	r10, r1
 e1a:	b1 08       	sbc	r11, r1
 e1c:	8c 82       	std	Y+4, r8	; 0x04
 e1e:	9d 82       	std	Y+5, r9	; 0x05
 e20:	ae 82       	std	Y+6, r10	; 0x06
 e22:	bf 82       	std	Y+7, r11	; 0x07
			NuOfSteps[2] -= 1;
 e24:	08 85       	ldd	r16, Y+8	; 0x08
 e26:	19 85       	ldd	r17, Y+9	; 0x09
 e28:	2a 85       	ldd	r18, Y+10	; 0x0a
 e2a:	3b 85       	ldd	r19, Y+11	; 0x0b
 e2c:	01 50       	subi	r16, 0x01	; 1
 e2e:	11 09       	sbc	r17, r1
 e30:	21 09       	sbc	r18, r1
 e32:	31 09       	sbc	r19, r1
 e34:	08 87       	std	Y+8, r16	; 0x08
 e36:	19 87       	std	Y+9, r17	; 0x09
 e38:	2a 87       	std	Y+10, r18	; 0x0a
 e3a:	3b 87       	std	Y+11, r19	; 0x0b
			NuOfSteps[3] -= 1;
 e3c:	4c 85       	ldd	r20, Y+12	; 0x0c
 e3e:	5d 85       	ldd	r21, Y+13	; 0x0d
 e40:	6e 85       	ldd	r22, Y+14	; 0x0e
 e42:	7f 85       	ldd	r23, Y+15	; 0x0f
 e44:	db 01       	movw	r26, r22
 e46:	ca 01       	movw	r24, r20
 e48:	01 97       	sbiw	r24, 0x01	; 1
 e4a:	a1 09       	sbc	r26, r1
 e4c:	b1 09       	sbc	r27, r1
 e4e:	8c 87       	std	Y+12, r24	; 0x0c
 e50:	9d 87       	std	Y+13, r25	; 0x0d
 e52:	ae 87       	std	Y+14, r26	; 0x0e
 e54:	bf 87       	std	Y+15, r27	; 0x0f
		}
		else
		{
			STpinChange(DIRD,0);
		}
		while ((NuOfSteps[0] & NuOfSteps[1] & NuOfSteps[2] & NuOfSteps[3]) != 0)
 e56:	8c 20       	and	r8, r12
 e58:	9d 20       	and	r9, r13
 e5a:	ae 20       	and	r10, r14
 e5c:	bf 20       	and	r11, r15
 e5e:	08 21       	and	r16, r8
 e60:	19 21       	and	r17, r9
 e62:	2a 21       	and	r18, r10
 e64:	3b 21       	and	r19, r11
 e66:	80 23       	and	r24, r16
 e68:	91 23       	and	r25, r17
 e6a:	a2 23       	and	r26, r18
 e6c:	b3 23       	and	r27, r19
 e6e:	89 2b       	or	r24, r25
 e70:	8a 2b       	or	r24, r26
 e72:	8b 2b       	or	r24, r27
 e74:	09 f0       	breq	.+2      	; 0xe78 <Stepper_move+0x5ec>
 e76:	55 cf       	rjmp	.-342    	; 0xd22 <Stepper_move+0x496>
			NuOfSteps[2] -= 1;
			NuOfSteps[3] -= 1;
		}
	}
	
}
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	1f 91       	pop	r17
 e7e:	0f 91       	pop	r16
 e80:	ff 90       	pop	r15
 e82:	ef 90       	pop	r14
 e84:	df 90       	pop	r13
 e86:	cf 90       	pop	r12
 e88:	bf 90       	pop	r11
 e8a:	af 90       	pop	r10
 e8c:	9f 90       	pop	r9
 e8e:	8f 90       	pop	r8
 e90:	08 95       	ret

00000e92 <UART_INIT>:
	for (int k=0;k<7;k++)
	{
		Transmit_Char(ptr_string[k]);  //Send 6 characters.
		_delay_ms(100);
	}
}
 e92:	87 e6       	ldi	r24, 0x67	; 103
 e94:	89 b9       	out	0x09, r24	; 9
 e96:	10 bc       	out	0x20, r1	; 32
 e98:	88 e1       	ldi	r24, 0x18	; 24
 e9a:	8a b9       	out	0x0a, r24	; 10
 e9c:	86 e8       	ldi	r24, 0x86	; 134
 e9e:	80 bd       	out	0x20, r24	; 32
 ea0:	08 95       	ret

00000ea2 <Recive_Char>:
 ea2:	5f 9b       	sbis	0x0b, 7	; 11
 ea4:	fe cf       	rjmp	.-4      	; 0xea2 <Recive_Char>
 ea6:	8c b1       	in	r24, 0x0c	; 12
 ea8:	08 95       	ret

00000eaa <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
 eaa:	0f 93       	push	r16
 eac:	1f 93       	push	r17
 eae:	cf 93       	push	r28
 eb0:	8c 01       	movw	r16, r24
	 	char ch;
	     uint8_t len = 0;
 eb2:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
 eb4:	0e 94 51 07 	call	0xea2	; 0xea2 <Recive_Char>
	 		if((ch==';')) //read till enter key is pressed
 eb8:	8b 33       	cpi	r24, 0x3B	; 59
 eba:	29 f4       	brne	.+10     	; 0xec6 <Recive_Data+0x1c>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
 ebc:	f8 01       	movw	r30, r16
 ebe:	ec 0f       	add	r30, r28
 ec0:	f1 1d       	adc	r31, r1
 ec2:	80 83       	st	Z, r24
	             len++;
	         }
	 	}

	
}
 ec4:	0c c0       	rjmp	.+24     	; 0xede <Recive_Data+0x34>
	 		if((ch==';')) //read till enter key is pressed
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
	 			break;           //and break the loop
	 		}
	         else if((ch=='\b') && (len!=0))
 ec6:	88 30       	cpi	r24, 0x08	; 8
 ec8:	21 f4       	brne	.+8      	; 0xed2 <Recive_Data+0x28>
 eca:	cc 23       	and	r28, r28
 ecc:	11 f0       	breq	.+4      	; 0xed2 <Recive_Data+0x28>
	         {
	 		    len--;    //If backspace is pressed then decrement the index to remove the old char
 ece:	c1 50       	subi	r28, 0x01	; 1
 ed0:	f1 cf       	rjmp	.-30     	; 0xeb4 <Recive_Data+0xa>
	         }
	         else
	         {
	             ptr_string[len]=ch; //copy the char into string and increment the index
 ed2:	f8 01       	movw	r30, r16
 ed4:	ec 0f       	add	r30, r28
 ed6:	f1 1d       	adc	r31, r1
 ed8:	80 83       	st	Z, r24
	             len++;
 eda:	cf 5f       	subi	r28, 0xFF	; 255
 edc:	eb cf       	rjmp	.-42     	; 0xeb4 <Recive_Data+0xa>
	         }
	 	}

	
}
 ede:	cf 91       	pop	r28
 ee0:	1f 91       	pop	r17
 ee2:	0f 91       	pop	r16
 ee4:	08 95       	ret

00000ee6 <__divmodhi4>:
 ee6:	97 fb       	bst	r25, 7
 ee8:	07 2e       	mov	r0, r23
 eea:	16 f4       	brtc	.+4      	; 0xef0 <__divmodhi4+0xa>
 eec:	00 94       	com	r0
 eee:	07 d0       	rcall	.+14     	; 0xefe <__divmodhi4_neg1>
 ef0:	77 fd       	sbrc	r23, 7
 ef2:	09 d0       	rcall	.+18     	; 0xf06 <__divmodhi4_neg2>
 ef4:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
 ef8:	07 fc       	sbrc	r0, 7
 efa:	05 d0       	rcall	.+10     	; 0xf06 <__divmodhi4_neg2>
 efc:	3e f4       	brtc	.+14     	; 0xf0c <__divmodhi4_exit>

00000efe <__divmodhi4_neg1>:
 efe:	90 95       	com	r25
 f00:	81 95       	neg	r24
 f02:	9f 4f       	sbci	r25, 0xFF	; 255
 f04:	08 95       	ret

00000f06 <__divmodhi4_neg2>:
 f06:	70 95       	com	r23
 f08:	61 95       	neg	r22
 f0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f0c <__divmodhi4_exit>:
 f0c:	08 95       	ret

00000f0e <__udivmodhi4>:
 f0e:	aa 1b       	sub	r26, r26
 f10:	bb 1b       	sub	r27, r27
 f12:	51 e1       	ldi	r21, 0x11	; 17
 f14:	07 c0       	rjmp	.+14     	; 0xf24 <__udivmodhi4_ep>

00000f16 <__udivmodhi4_loop>:
 f16:	aa 1f       	adc	r26, r26
 f18:	bb 1f       	adc	r27, r27
 f1a:	a6 17       	cp	r26, r22
 f1c:	b7 07       	cpc	r27, r23
 f1e:	10 f0       	brcs	.+4      	; 0xf24 <__udivmodhi4_ep>
 f20:	a6 1b       	sub	r26, r22
 f22:	b7 0b       	sbc	r27, r23

00000f24 <__udivmodhi4_ep>:
 f24:	88 1f       	adc	r24, r24
 f26:	99 1f       	adc	r25, r25
 f28:	5a 95       	dec	r21
 f2a:	a9 f7       	brne	.-22     	; 0xf16 <__udivmodhi4_loop>
 f2c:	80 95       	com	r24
 f2e:	90 95       	com	r25
 f30:	bc 01       	movw	r22, r24
 f32:	cd 01       	movw	r24, r26
 f34:	08 95       	ret

00000f36 <atoi>:
 f36:	fc 01       	movw	r30, r24
 f38:	88 27       	eor	r24, r24
 f3a:	99 27       	eor	r25, r25
 f3c:	e8 94       	clt
 f3e:	21 91       	ld	r18, Z+
 f40:	20 32       	cpi	r18, 0x20	; 32
 f42:	e9 f3       	breq	.-6      	; 0xf3e <atoi+0x8>
 f44:	29 30       	cpi	r18, 0x09	; 9
 f46:	10 f0       	brcs	.+4      	; 0xf4c <atoi+0x16>
 f48:	2e 30       	cpi	r18, 0x0E	; 14
 f4a:	c8 f3       	brcs	.-14     	; 0xf3e <atoi+0x8>
 f4c:	2b 32       	cpi	r18, 0x2B	; 43
 f4e:	41 f0       	breq	.+16     	; 0xf60 <atoi+0x2a>
 f50:	2d 32       	cpi	r18, 0x2D	; 45
 f52:	39 f4       	brne	.+14     	; 0xf62 <atoi+0x2c>
 f54:	68 94       	set
 f56:	04 c0       	rjmp	.+8      	; 0xf60 <atoi+0x2a>
 f58:	0e 94 b9 07 	call	0xf72	; 0xf72 <__mulhi_const_10>
 f5c:	82 0f       	add	r24, r18
 f5e:	91 1d       	adc	r25, r1
 f60:	21 91       	ld	r18, Z+
 f62:	20 53       	subi	r18, 0x30	; 48
 f64:	2a 30       	cpi	r18, 0x0A	; 10
 f66:	c0 f3       	brcs	.-16     	; 0xf58 <atoi+0x22>
 f68:	1e f4       	brtc	.+6      	; 0xf70 <atoi+0x3a>
 f6a:	90 95       	com	r25
 f6c:	81 95       	neg	r24
 f6e:	9f 4f       	sbci	r25, 0xFF	; 255
 f70:	08 95       	ret

00000f72 <__mulhi_const_10>:
 f72:	7a e0       	ldi	r23, 0x0A	; 10
 f74:	97 9f       	mul	r25, r23
 f76:	90 2d       	mov	r25, r0
 f78:	87 9f       	mul	r24, r23
 f7a:	80 2d       	mov	r24, r0
 f7c:	91 0d       	add	r25, r1
 f7e:	11 24       	eor	r1, r1
 f80:	08 95       	ret

00000f82 <_exit>:
 f82:	f8 94       	cli

00000f84 <__stop_program>:
 f84:	ff cf       	rjmp	.-2      	; 0xf84 <__stop_program>
