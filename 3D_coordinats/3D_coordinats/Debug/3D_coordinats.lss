
3D_coordinats.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ad  00800060  00800060  00000a1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000162e  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3c  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d43  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aac  00000000  00000000  000041ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 30       	cpi	r26, 0x0D	; 13
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  74:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <third_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int third_value (char* String)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	c4 56       	subi	r28, 0x64	; 100
  86:	d1 09       	sbc	r29, r1
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	ac 01       	movw	r20, r24
  94:	fe 01       	movw	r30, r28
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	9e 01       	movw	r18, r28
  9a:	2b 59       	subi	r18, 0x9B	; 155
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
	int i = 0,j=0;
	char third_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		third_v [i] = 0;
  9e:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
int third_value (char* String)
{
	int i = 0,j=0;
	char third_v[100];
	for (int i = 0 ; i < 100 ;i++)
  a0:	e2 17       	cp	r30, r18
  a2:	f3 07       	cpc	r31, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <third_value+0x22>
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		third_v [i] = 0;
	}
	while(1)
	{
		if (String [i] == '-'){
  ae:	fa 01       	movw	r30, r20
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	9d 32       	cpi	r25, 0x2D	; 45
  b8:	99 f4       	brne	.+38     	; 0xe0 <third_value+0x64>
			third_v [j] = String[j+i+1];
  ba:	f9 01       	movw	r30, r18
  bc:	e6 0f       	add	r30, r22
  be:	f7 1f       	adc	r31, r23
  c0:	e4 0f       	add	r30, r20
  c2:	f5 1f       	adc	r31, r21
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	a1 e0       	ldi	r26, 0x01	; 1
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ac 0f       	add	r26, r28
  cc:	bd 1f       	adc	r27, r29
  ce:	a6 0f       	add	r26, r22
  d0:	b7 1f       	adc	r27, r23
  d2:	8c 93       	st	X, r24
			if (String [j+i+2] == ';')
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	8b 33       	cpi	r24, 0x3B	; 59
  d8:	31 f0       	breq	.+12     	; 0xe6 <third_value+0x6a>
			break;
			j++;
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	e7 cf       	rjmp	.-50     	; 0xae <third_value+0x32>
		}
		else
		i++;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	e4 cf       	rjmp	.-56     	; 0xae <third_value+0x32>
	}
	return (atoi(third_v));
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 ac 04 	call	0x958	; 0x958 <atoi>
}
  ee:	cc 59       	subi	r28, 0x9C	; 156
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <second_value>:

int second_value (char* String)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c4 56       	subi	r28, 0x64	; 100
 10c:	d1 09       	sbc	r29, r1
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	ac 01       	movw	r20, r24
 11a:	fe 01       	movw	r30, r28
 11c:	31 96       	adiw	r30, 0x01	; 1
 11e:	9e 01       	movw	r18, r28
 120:	2b 59       	subi	r18, 0x9B	; 155
 122:	3f 4f       	sbci	r19, 0xFF	; 255
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		second_v [i] = 0;
 124:	11 92       	st	Z+, r1

int second_value (char* String)
{
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
 126:	e2 17       	cp	r30, r18
 128:	f3 07       	cpc	r31, r19
 12a:	e1 f7       	brne	.-8      	; 0x124 <second_value+0x22>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
	{
		second_v [i] = 0;
	}
    while(1)
    {
        if (String [i] == ','){
 134:	fa 01       	movw	r30, r20
 136:	e2 0f       	add	r30, r18
 138:	f3 1f       	adc	r31, r19
 13a:	90 81       	ld	r25, Z
 13c:	9c 32       	cpi	r25, 0x2C	; 44
 13e:	99 f4       	brne	.+38     	; 0x166 <second_value+0x64>
				second_v [j] = String[j+i+1];
 140:	f9 01       	movw	r30, r18
 142:	e6 0f       	add	r30, r22
 144:	f7 1f       	adc	r31, r23
 146:	e4 0f       	add	r30, r20
 148:	f5 1f       	adc	r31, r21
 14a:	81 81       	ldd	r24, Z+1	; 0x01
 14c:	a1 e0       	ldi	r26, 0x01	; 1
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	ac 0f       	add	r26, r28
 152:	bd 1f       	adc	r27, r29
 154:	a6 0f       	add	r26, r22
 156:	b7 1f       	adc	r27, r23
 158:	8c 93       	st	X, r24
				if (String [j+i+2] == '-')
 15a:	82 81       	ldd	r24, Z+2	; 0x02
 15c:	8d 32       	cpi	r24, 0x2D	; 45
 15e:	31 f0       	breq	.+12     	; 0x16c <second_value+0x6a>
				break;
				j++;
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	e7 cf       	rjmp	.-50     	; 0x134 <second_value+0x32>
		}
		else
		i++;
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	e4 cf       	rjmp	.-56     	; 0x134 <second_value+0x32>
    }
    return (atoi(second_v));
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 ac 04 	call	0x958	; 0x958 <atoi>
}
 174:	cc 59       	subi	r28, 0x9C	; 156
 176:	df 4f       	sbci	r29, 0xFF	; 255
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int *current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
 18e:	71 83       	std	Z+1, r23	; 0x01
 190:	60 83       	st	Z, r22
    return x;
 192:	cb 01       	movw	r24, r22
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	08 95       	ret

0000019a <Init>:
		z=0;
	}
}
void Init(void)
{
	StepperInit(16,1000);
 19a:	68 ee       	ldi	r22, 0xE8	; 232
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <StepperInit>
	DDRC |=0XFF;
 1a6:	84 b3       	in	r24, 0x14	; 20
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA7);
 1ac:	d7 9a       	sbi	0x1a, 7	; 26
	UART_INIT();
 1ae:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <UART_INIT>
 1b2:	08 95       	ret

000001b4 <main>:
int z;
char String [150]  ;

int main(void)
{
	Init();
 1b4:	0e 94 cd 00 	call	0x19a	; 0x19a <Init>
 1b8:	c9 ed       	ldi	r28, 0xD9	; 217
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
		
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
			x *=-1;
			statusx = 1;
 1bc:	01 e0       	ldi	r16, 0x01	; 1
			z *=-1;
			statusz = 1;
		}
		else
		statusz = 0;
		Stepper_A_rev(statusx,(x*100));
 1be:	14 e6       	ldi	r17, 0x64	; 100
 1c0:	e5 e7       	ldi	r30, 0x75	; 117
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
		{
			String [i] = 0;
 1c4:	11 92       	st	Z+, r1
int main(void)
{
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
 1c6:	ec 17       	cp	r30, r28
 1c8:	fd 07       	cpc	r31, r29
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x10>
		{
			String [i] = 0;
		}
		Recive_Data(String);
 1cc:	85 e7       	ldi	r24, 0x75	; 117
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 66 04 	call	0x8cc	; 0x8cc <Recive_Data>
		value_1 = atoi(String);           //extract first value
 1d4:	85 e7       	ldi	r24, 0x75	; 117
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 ac 04 	call	0x958	; 0x958 <atoi>
 1dc:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <value_1+0x1>
 1e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <value_1>
		value_2 = second_value (String); //call function to extract second value
 1e4:	85 e7       	ldi	r24, 0x75	; 117
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 81 00 	call	0x102	; 0x102 <second_value>
 1ec:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <value_2+0x1>
 1f0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <value_2>
		value_3 = third_value (String); //call function to extract third value
 1f4:	85 e7       	ldi	r24, 0x75	; 117
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 3e 00 	call	0x7c	; 0x7c <third_value>
 1fc:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <value_3+0x1>
 200:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <value_3>

		
		if (!(value_1>250||value_2>250||value_3>250||value_1<0||value_2<0||value_3<0)) // if the values don't skip the plate ,use it
 204:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <value_1>
 208:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <value_1+0x1>
 20c:	6b 3f       	cpi	r22, 0xFB	; 251
 20e:	71 05       	cpc	r23, r1
 210:	b0 f5       	brcc	.+108    	; 0x27e <main+0xca>
 212:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <value_2>
 216:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <value_2+0x1>
 21a:	2b 3f       	cpi	r18, 0xFB	; 251
 21c:	31 05       	cpc	r19, r1
 21e:	78 f5       	brcc	.+94     	; 0x27e <main+0xca>
 220:	8b 3f       	cpi	r24, 0xFB	; 251
 222:	91 05       	cpc	r25, r1
 224:	60 f5       	brcc	.+88     	; 0x27e <main+0xca>

		{
			x = sub_function (&old_val_1, value_1);     //call function to extract first step
 226:	84 e6       	ldi	r24, 0x64	; 100
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 22e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <x+0x1>
 232:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <x>
			y = sub_function (&old_val_2, value_2);    //call function to extract second step
 236:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <value_2>
 23a:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <value_2+0x1>
 23e:	82 e6       	ldi	r24, 0x62	; 98
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 246:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <y+0x1>
 24a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <y>
			z = sub_function (&old_val_3, value_3);    //call function to extract third step
 24e:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <value_3>
 252:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <value_3+0x1>
 256:	80 e6       	ldi	r24, 0x60	; 96
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 25e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <z+0x1>
 262:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <z>
			value_1 = 0;
 266:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <value_1+0x1>
 26a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <value_1>
			value_2 = 0;
 26e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <value_2+0x1>
 272:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <value_2>
			value_3 = 0;
 276:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <value_3+0x1>
 27a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <value_3>
			
		}
		
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
 27e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <x>
 282:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <x+0x1>
 286:	99 23       	and	r25, r25
 288:	54 f4       	brge	.+20     	; 0x29e <main+0xea>
			x *=-1;
 28a:	91 95       	neg	r25
 28c:	81 95       	neg	r24
 28e:	91 09       	sbc	r25, r1
 290:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <x+0x1>
 294:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <x>
			statusx = 1;
 298:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <statusx>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <main+0xee>
		}
		else
		statusx = 0;
 29e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <statusx>
		if (y < 0 ){
 2a2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <y>
 2a6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <y+0x1>
 2aa:	99 23       	and	r25, r25
 2ac:	54 f4       	brge	.+20     	; 0x2c2 <main+0x10e>
			y *=-1;
 2ae:	91 95       	neg	r25
 2b0:	81 95       	neg	r24
 2b2:	91 09       	sbc	r25, r1
 2b4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <y+0x1>
 2b8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <y>
			statusy = 1;
 2bc:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <statusy>
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <main+0x112>
		}
		else
		statusy = 0;
 2c2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <statusy>
		if (z < 0 ){
 2c6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <z>
 2ca:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <z+0x1>
 2ce:	99 23       	and	r25, r25
 2d0:	54 f4       	brge	.+20     	; 0x2e6 <main+0x132>
			z *=-1;
 2d2:	91 95       	neg	r25
 2d4:	81 95       	neg	r24
 2d6:	91 09       	sbc	r25, r1
 2d8:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <z+0x1>
 2dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <z>
			statusz = 1;
 2e0:	00 93 66 00 	sts	0x0066, r16	; 0x800066 <statusz>
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <main+0x136>
		}
		else
		statusz = 0;
 2e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <statusz>
		Stepper_A_rev(statusx,(x*100));
 2ea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <x>
 2ee:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <x+0x1>
 2f2:	18 9f       	mul	r17, r24
 2f4:	a0 01       	movw	r20, r0
 2f6:	19 9f       	mul	r17, r25
 2f8:	50 0d       	add	r21, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	05 2e       	mov	r0, r21
 2fe:	00 0c       	add	r0, r0
 300:	66 0b       	sbc	r22, r22
 302:	77 0b       	sbc	r23, r23
 304:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <statusx>
 308:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Stepper_A_rev>
		Stepper_B_rev(statusy,(y*100));
 30c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <y>
 310:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <y+0x1>
 314:	18 9f       	mul	r17, r24
 316:	a0 01       	movw	r20, r0
 318:	19 9f       	mul	r17, r25
 31a:	50 0d       	add	r21, r0
 31c:	11 24       	eor	r1, r1
 31e:	05 2e       	mov	r0, r21
 320:	00 0c       	add	r0, r0
 322:	66 0b       	sbc	r22, r22
 324:	77 0b       	sbc	r23, r23
 326:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <statusy>
 32a:	0e 94 04 04 	call	0x808	; 0x808 <Stepper_B_rev>
		Stepper_C_rev(statusy,(z*100));
 32e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <z>
 332:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <z+0x1>
 336:	18 9f       	mul	r17, r24
 338:	a0 01       	movw	r20, r0
 33a:	19 9f       	mul	r17, r25
 33c:	50 0d       	add	r21, r0
 33e:	11 24       	eor	r1, r1
 340:	05 2e       	mov	r0, r21
 342:	00 0c       	add	r0, r0
 344:	66 0b       	sbc	r22, r22
 346:	77 0b       	sbc	r23, r23
 348:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <statusy>
 34c:	0e 94 2f 04 	call	0x85e	; 0x85e <Stepper_C_rev>
		x=0;
 350:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <x+0x1>
 354:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <x>
		y=0;
 358:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <y+0x1>
 35c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <y>
		z=0;
 360:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <z+0x1>
 364:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <z>
	}
 368:	2b cf       	rjmp	.-426    	; 0x1c0 <main+0xc>

0000036a <STpinChange>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	67 2b       	or	r22, r23
 36c:	09 f0       	breq	.+2      	; 0x370 <STpinChange+0x6>
 36e:	9f c0       	rjmp	.+318    	; 0x4ae <__stack+0x4f>
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	11 f4       	brne	.+4      	; 0x378 <STpinChange+0xe>
 374:	d8 98       	cbi	0x1b, 0	; 27
 376:	08 95       	ret
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	91 05       	cpc	r25, r1
 37c:	11 f4       	brne	.+4      	; 0x382 <STpinChange+0x18>
 37e:	d9 98       	cbi	0x1b, 1	; 27
 380:	08 95       	ret
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	91 05       	cpc	r25, r1
 386:	11 f4       	brne	.+4      	; 0x38c <STpinChange+0x22>
 388:	da 98       	cbi	0x1b, 2	; 27
 38a:	08 95       	ret
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	91 05       	cpc	r25, r1
 390:	11 f4       	brne	.+4      	; 0x396 <STpinChange+0x2c>
 392:	db 98       	cbi	0x1b, 3	; 27
 394:	08 95       	ret
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	91 05       	cpc	r25, r1
 39a:	11 f4       	brne	.+4      	; 0x3a0 <STpinChange+0x36>
 39c:	dc 98       	cbi	0x1b, 4	; 27
 39e:	08 95       	ret
 3a0:	85 30       	cpi	r24, 0x05	; 5
 3a2:	91 05       	cpc	r25, r1
 3a4:	11 f4       	brne	.+4      	; 0x3aa <STpinChange+0x40>
 3a6:	dd 98       	cbi	0x1b, 5	; 27
 3a8:	08 95       	ret
 3aa:	86 30       	cpi	r24, 0x06	; 6
 3ac:	91 05       	cpc	r25, r1
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <STpinChange+0x4a>
 3b0:	de 98       	cbi	0x1b, 6	; 27
 3b2:	08 95       	ret
 3b4:	87 30       	cpi	r24, 0x07	; 7
 3b6:	91 05       	cpc	r25, r1
 3b8:	11 f4       	brne	.+4      	; 0x3be <STpinChange+0x54>
 3ba:	df 98       	cbi	0x1b, 7	; 27
 3bc:	08 95       	ret
 3be:	8a 30       	cpi	r24, 0x0A	; 10
 3c0:	91 05       	cpc	r25, r1
 3c2:	11 f4       	brne	.+4      	; 0x3c8 <STpinChange+0x5e>
 3c4:	c0 98       	cbi	0x18, 0	; 24
 3c6:	08 95       	ret
 3c8:	8b 30       	cpi	r24, 0x0B	; 11
 3ca:	91 05       	cpc	r25, r1
 3cc:	11 f4       	brne	.+4      	; 0x3d2 <STpinChange+0x68>
 3ce:	c1 98       	cbi	0x18, 1	; 24
 3d0:	08 95       	ret
 3d2:	8c 30       	cpi	r24, 0x0C	; 12
 3d4:	91 05       	cpc	r25, r1
 3d6:	11 f4       	brne	.+4      	; 0x3dc <STpinChange+0x72>
 3d8:	c2 98       	cbi	0x18, 2	; 24
 3da:	08 95       	ret
 3dc:	8d 30       	cpi	r24, 0x0D	; 13
 3de:	91 05       	cpc	r25, r1
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <STpinChange+0x7c>
 3e2:	c3 98       	cbi	0x18, 3	; 24
 3e4:	08 95       	ret
 3e6:	8e 30       	cpi	r24, 0x0E	; 14
 3e8:	91 05       	cpc	r25, r1
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <STpinChange+0x86>
 3ec:	c4 98       	cbi	0x18, 4	; 24
 3ee:	08 95       	ret
 3f0:	8f 30       	cpi	r24, 0x0F	; 15
 3f2:	91 05       	cpc	r25, r1
 3f4:	11 f4       	brne	.+4      	; 0x3fa <STpinChange+0x90>
 3f6:	c5 98       	cbi	0x18, 5	; 24
 3f8:	08 95       	ret
 3fa:	80 31       	cpi	r24, 0x10	; 16
 3fc:	91 05       	cpc	r25, r1
 3fe:	11 f4       	brne	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	c6 98       	cbi	0x18, 6	; 24
 402:	08 95       	ret
 404:	81 31       	cpi	r24, 0x11	; 17
 406:	91 05       	cpc	r25, r1
 408:	11 f4       	brne	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	c7 98       	cbi	0x18, 7	; 24
 40c:	08 95       	ret
 40e:	84 31       	cpi	r24, 0x14	; 20
 410:	91 05       	cpc	r25, r1
 412:	11 f4       	brne	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	a8 98       	cbi	0x15, 0	; 21
 416:	08 95       	ret
 418:	85 31       	cpi	r24, 0x15	; 21
 41a:	91 05       	cpc	r25, r1
 41c:	11 f4       	brne	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	a9 98       	cbi	0x15, 1	; 21
 420:	08 95       	ret
 422:	86 31       	cpi	r24, 0x16	; 22
 424:	91 05       	cpc	r25, r1
 426:	11 f4       	brne	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	aa 98       	cbi	0x15, 2	; 21
 42a:	08 95       	ret
 42c:	87 31       	cpi	r24, 0x17	; 23
 42e:	91 05       	cpc	r25, r1
 430:	11 f4       	brne	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	ab 98       	cbi	0x15, 3	; 21
 434:	08 95       	ret
 436:	88 31       	cpi	r24, 0x18	; 24
 438:	91 05       	cpc	r25, r1
 43a:	11 f4       	brne	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	ac 98       	cbi	0x15, 4	; 21
 43e:	08 95       	ret
 440:	89 31       	cpi	r24, 0x19	; 25
 442:	91 05       	cpc	r25, r1
 444:	11 f4       	brne	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	ad 98       	cbi	0x15, 5	; 21
 448:	08 95       	ret
 44a:	8a 31       	cpi	r24, 0x1A	; 26
 44c:	91 05       	cpc	r25, r1
 44e:	11 f4       	brne	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	ae 98       	cbi	0x15, 6	; 21
 452:	08 95       	ret
 454:	8b 31       	cpi	r24, 0x1B	; 27
 456:	91 05       	cpc	r25, r1
 458:	11 f4       	brne	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	af 98       	cbi	0x15, 7	; 21
 45c:	08 95       	ret
 45e:	8e 31       	cpi	r24, 0x1E	; 30
 460:	91 05       	cpc	r25, r1
 462:	11 f4       	brne	.+4      	; 0x468 <__stack+0x9>
 464:	90 98       	cbi	0x12, 0	; 18
 466:	08 95       	ret
 468:	8f 31       	cpi	r24, 0x1F	; 31
 46a:	91 05       	cpc	r25, r1
 46c:	11 f4       	brne	.+4      	; 0x472 <__stack+0x13>
 46e:	91 98       	cbi	0x12, 1	; 18
 470:	08 95       	ret
 472:	80 32       	cpi	r24, 0x20	; 32
 474:	91 05       	cpc	r25, r1
 476:	11 f4       	brne	.+4      	; 0x47c <__stack+0x1d>
 478:	92 98       	cbi	0x12, 2	; 18
 47a:	08 95       	ret
 47c:	81 32       	cpi	r24, 0x21	; 33
 47e:	91 05       	cpc	r25, r1
 480:	11 f4       	brne	.+4      	; 0x486 <__stack+0x27>
 482:	93 98       	cbi	0x12, 3	; 18
 484:	08 95       	ret
 486:	82 32       	cpi	r24, 0x22	; 34
 488:	91 05       	cpc	r25, r1
 48a:	11 f4       	brne	.+4      	; 0x490 <__stack+0x31>
 48c:	94 98       	cbi	0x12, 4	; 18
 48e:	08 95       	ret
 490:	83 32       	cpi	r24, 0x23	; 35
 492:	91 05       	cpc	r25, r1
 494:	11 f4       	brne	.+4      	; 0x49a <__stack+0x3b>
 496:	95 98       	cbi	0x12, 5	; 18
 498:	08 95       	ret
 49a:	84 32       	cpi	r24, 0x24	; 36
 49c:	91 05       	cpc	r25, r1
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__stack+0x45>
 4a0:	96 98       	cbi	0x12, 6	; 18
 4a2:	08 95       	ret
 4a4:	85 97       	sbiw	r24, 0x25	; 37
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__stack+0x4b>
 4a8:	9f c0       	rjmp	.+318    	; 0x5e8 <__stack+0x189>
 4aa:	97 98       	cbi	0x12, 7	; 18
 4ac:	08 95       	ret
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__stack+0x57>
 4b2:	d8 9a       	sbi	0x1b, 0	; 27
 4b4:	08 95       	ret
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	91 05       	cpc	r25, r1
 4ba:	11 f4       	brne	.+4      	; 0x4c0 <__stack+0x61>
 4bc:	d9 9a       	sbi	0x1b, 1	; 27
 4be:	08 95       	ret
 4c0:	82 30       	cpi	r24, 0x02	; 2
 4c2:	91 05       	cpc	r25, r1
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__stack+0x6b>
 4c6:	da 9a       	sbi	0x1b, 2	; 27
 4c8:	08 95       	ret
 4ca:	83 30       	cpi	r24, 0x03	; 3
 4cc:	91 05       	cpc	r25, r1
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__stack+0x75>
 4d0:	db 9a       	sbi	0x1b, 3	; 27
 4d2:	08 95       	ret
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	91 05       	cpc	r25, r1
 4d8:	11 f4       	brne	.+4      	; 0x4de <__stack+0x7f>
 4da:	dc 9a       	sbi	0x1b, 4	; 27
 4dc:	08 95       	ret
 4de:	85 30       	cpi	r24, 0x05	; 5
 4e0:	91 05       	cpc	r25, r1
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__stack+0x89>
 4e4:	dd 9a       	sbi	0x1b, 5	; 27
 4e6:	08 95       	ret
 4e8:	86 30       	cpi	r24, 0x06	; 6
 4ea:	91 05       	cpc	r25, r1
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__stack+0x93>
 4ee:	de 9a       	sbi	0x1b, 6	; 27
 4f0:	08 95       	ret
 4f2:	87 30       	cpi	r24, 0x07	; 7
 4f4:	91 05       	cpc	r25, r1
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__stack+0x9d>
 4f8:	df 9a       	sbi	0x1b, 7	; 27
 4fa:	08 95       	ret
 4fc:	8a 30       	cpi	r24, 0x0A	; 10
 4fe:	91 05       	cpc	r25, r1
 500:	11 f4       	brne	.+4      	; 0x506 <__stack+0xa7>
 502:	c0 9a       	sbi	0x18, 0	; 24
 504:	08 95       	ret
 506:	8b 30       	cpi	r24, 0x0B	; 11
 508:	91 05       	cpc	r25, r1
 50a:	11 f4       	brne	.+4      	; 0x510 <__stack+0xb1>
 50c:	c1 9a       	sbi	0x18, 1	; 24
 50e:	08 95       	ret
 510:	8c 30       	cpi	r24, 0x0C	; 12
 512:	91 05       	cpc	r25, r1
 514:	11 f4       	brne	.+4      	; 0x51a <__stack+0xbb>
 516:	c2 9a       	sbi	0x18, 2	; 24
 518:	08 95       	ret
 51a:	8d 30       	cpi	r24, 0x0D	; 13
 51c:	91 05       	cpc	r25, r1
 51e:	11 f4       	brne	.+4      	; 0x524 <__stack+0xc5>
 520:	c3 9a       	sbi	0x18, 3	; 24
 522:	08 95       	ret
 524:	8e 30       	cpi	r24, 0x0E	; 14
 526:	91 05       	cpc	r25, r1
 528:	11 f4       	brne	.+4      	; 0x52e <__stack+0xcf>
 52a:	c4 9a       	sbi	0x18, 4	; 24
 52c:	08 95       	ret
 52e:	8f 30       	cpi	r24, 0x0F	; 15
 530:	91 05       	cpc	r25, r1
 532:	11 f4       	brne	.+4      	; 0x538 <__stack+0xd9>
 534:	c5 9a       	sbi	0x18, 5	; 24
 536:	08 95       	ret
 538:	80 31       	cpi	r24, 0x10	; 16
 53a:	91 05       	cpc	r25, r1
 53c:	11 f4       	brne	.+4      	; 0x542 <__stack+0xe3>
 53e:	c6 9a       	sbi	0x18, 6	; 24
 540:	08 95       	ret
 542:	81 31       	cpi	r24, 0x11	; 17
 544:	91 05       	cpc	r25, r1
 546:	11 f4       	brne	.+4      	; 0x54c <__stack+0xed>
 548:	c7 9a       	sbi	0x18, 7	; 24
 54a:	08 95       	ret
 54c:	84 31       	cpi	r24, 0x14	; 20
 54e:	91 05       	cpc	r25, r1
 550:	11 f4       	brne	.+4      	; 0x556 <__stack+0xf7>
 552:	a8 9a       	sbi	0x15, 0	; 21
 554:	08 95       	ret
 556:	85 31       	cpi	r24, 0x15	; 21
 558:	91 05       	cpc	r25, r1
 55a:	11 f4       	brne	.+4      	; 0x560 <__stack+0x101>
 55c:	a9 9a       	sbi	0x15, 1	; 21
 55e:	08 95       	ret
 560:	86 31       	cpi	r24, 0x16	; 22
 562:	91 05       	cpc	r25, r1
 564:	11 f4       	brne	.+4      	; 0x56a <__stack+0x10b>
 566:	aa 9a       	sbi	0x15, 2	; 21
 568:	08 95       	ret
 56a:	87 31       	cpi	r24, 0x17	; 23
 56c:	91 05       	cpc	r25, r1
 56e:	11 f4       	brne	.+4      	; 0x574 <__stack+0x115>
 570:	ab 9a       	sbi	0x15, 3	; 21
 572:	08 95       	ret
 574:	88 31       	cpi	r24, 0x18	; 24
 576:	91 05       	cpc	r25, r1
 578:	11 f4       	brne	.+4      	; 0x57e <__stack+0x11f>
 57a:	ac 9a       	sbi	0x15, 4	; 21
 57c:	08 95       	ret
 57e:	89 31       	cpi	r24, 0x19	; 25
 580:	91 05       	cpc	r25, r1
 582:	11 f4       	brne	.+4      	; 0x588 <__stack+0x129>
 584:	ad 9a       	sbi	0x15, 5	; 21
 586:	08 95       	ret
 588:	8a 31       	cpi	r24, 0x1A	; 26
 58a:	91 05       	cpc	r25, r1
 58c:	11 f4       	brne	.+4      	; 0x592 <__stack+0x133>
 58e:	ae 9a       	sbi	0x15, 6	; 21
 590:	08 95       	ret
 592:	8b 31       	cpi	r24, 0x1B	; 27
 594:	91 05       	cpc	r25, r1
 596:	11 f4       	brne	.+4      	; 0x59c <__stack+0x13d>
 598:	af 9a       	sbi	0x15, 7	; 21
 59a:	08 95       	ret
 59c:	8e 31       	cpi	r24, 0x1E	; 30
 59e:	91 05       	cpc	r25, r1
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__stack+0x147>
 5a2:	90 9a       	sbi	0x12, 0	; 18
 5a4:	08 95       	ret
 5a6:	8f 31       	cpi	r24, 0x1F	; 31
 5a8:	91 05       	cpc	r25, r1
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__stack+0x151>
 5ac:	91 9a       	sbi	0x12, 1	; 18
 5ae:	08 95       	ret
 5b0:	80 32       	cpi	r24, 0x20	; 32
 5b2:	91 05       	cpc	r25, r1
 5b4:	11 f4       	brne	.+4      	; 0x5ba <__stack+0x15b>
 5b6:	92 9a       	sbi	0x12, 2	; 18
 5b8:	08 95       	ret
 5ba:	81 32       	cpi	r24, 0x21	; 33
 5bc:	91 05       	cpc	r25, r1
 5be:	11 f4       	brne	.+4      	; 0x5c4 <__stack+0x165>
 5c0:	93 9a       	sbi	0x12, 3	; 18
 5c2:	08 95       	ret
 5c4:	82 32       	cpi	r24, 0x22	; 34
 5c6:	91 05       	cpc	r25, r1
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__stack+0x16f>
 5ca:	94 9a       	sbi	0x12, 4	; 18
 5cc:	08 95       	ret
 5ce:	83 32       	cpi	r24, 0x23	; 35
 5d0:	91 05       	cpc	r25, r1
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__stack+0x179>
 5d4:	95 9a       	sbi	0x12, 5	; 18
 5d6:	08 95       	ret
 5d8:	84 32       	cpi	r24, 0x24	; 36
 5da:	91 05       	cpc	r25, r1
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__stack+0x183>
 5de:	96 9a       	sbi	0x12, 6	; 18
 5e0:	08 95       	ret
 5e2:	85 97       	sbiw	r24, 0x25	; 37
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <__stack+0x189>
 5e6:	97 9a       	sbi	0x12, 7	; 18
 5e8:	08 95       	ret

000005ea <steper_1step>:
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	84 e1       	ldi	r24, 0x14	; 20
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	85 e1       	ldi	r24, 0x15	; 21
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	86 e1       	ldi	r24, 0x16	; 22
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 60e:	08 95       	ret

00000610 <steper_Hstep>:
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	84 e1       	ldi	r24, 0x14	; 20
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	85 e1       	ldi	r24, 0x15	; 21
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	86 e1       	ldi	r24, 0x16	; 22
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 634:	08 95       	ret

00000636 <steper_Qstep>:
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	84 e1       	ldi	r24, 0x14	; 20
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	85 e1       	ldi	r24, 0x15	; 21
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	86 e1       	ldi	r24, 0x16	; 22
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 65a:	08 95       	ret

0000065c <steper_Estep>:
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	84 e1       	ldi	r24, 0x14	; 20
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	85 e1       	ldi	r24, 0x15	; 21
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	86 e1       	ldi	r24, 0x16	; 22
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 680:	08 95       	ret

00000682 <steper_Sstep>:
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	84 e1       	ldi	r24, 0x14	; 20
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	85 e1       	ldi	r24, 0x15	; 21
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	86 e1       	ldi	r24, 0x16	; 22
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 6a6:	08 95       	ret

000006a8 <StepperInit>:
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	eb 01       	movw	r28, r22
 6ae:	86 30       	cpi	r24, 0x06	; 6
 6b0:	91 05       	cpc	r25, r1
 6b2:	99 f0       	breq	.+38     	; 0x6da <StepperInit+0x32>
 6b4:	34 f4       	brge	.+12     	; 0x6c2 <StepperInit+0x1a>
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	91 05       	cpc	r25, r1
 6ba:	49 f0       	breq	.+18     	; 0x6ce <StepperInit+0x26>
 6bc:	02 97       	sbiw	r24, 0x02	; 2
 6be:	51 f0       	breq	.+20     	; 0x6d4 <StepperInit+0x2c>
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <StepperInit+0x42>
 6c2:	88 30       	cpi	r24, 0x08	; 8
 6c4:	91 05       	cpc	r25, r1
 6c6:	61 f0       	breq	.+24     	; 0x6e0 <StepperInit+0x38>
 6c8:	40 97       	sbiw	r24, 0x10	; 16
 6ca:	69 f0       	breq	.+26     	; 0x6e6 <StepperInit+0x3e>
 6cc:	0e c0       	rjmp	.+28     	; 0x6ea <StepperInit+0x42>
 6ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <steper_1step>
 6d2:	0b c0       	rjmp	.+22     	; 0x6ea <StepperInit+0x42>
 6d4:	0e 94 08 03 	call	0x610	; 0x610 <steper_Hstep>
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <StepperInit+0x42>
 6da:	0e 94 1b 03 	call	0x636	; 0x636 <steper_Qstep>
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <StepperInit+0x42>
 6e0:	0e 94 2e 03 	call	0x65c	; 0x65c <steper_Estep>
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <StepperInit+0x42>
 6e6:	0e 94 41 03 	call	0x682	; 0x682 <steper_Sstep>
 6ea:	d0 93 0c 01 	sts	0x010C, r29	; 0x80010c <speed+0x1>
 6ee:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <speed>
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <setspeed>:
 6f8:	bc 01       	movw	r22, r24
 6fa:	88 ee       	ldi	r24, 0xE8	; 232
 6fc:	93 e0       	ldi	r25, 0x03	; 3
 6fe:	0e 94 84 04 	call	0x908	; 0x908 <__divmodhi4>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	4c f4       	brge	.+18     	; 0x71a <setspeed+0x22>
 708:	8f ec       	ldi	r24, 0xCF	; 207
 70a:	97 e0       	ldi	r25, 0x07	; 7
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <setspeed+0x14>
 710:	00 c0       	rjmp	.+0      	; 0x712 <setspeed+0x1a>
 712:	00 00       	nop
 714:	61 50       	subi	r22, 0x01	; 1
 716:	71 09       	sbc	r23, r1
 718:	b9 f7       	brne	.-18     	; 0x708 <setspeed+0x10>
 71a:	08 95       	ret

0000071c <Stepper_A_onerev>:
 71c:	61 e0       	ldi	r22, 0x01	; 1
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	87 e1       	ldi	r24, 0x17	; 23
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 728:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed>
 72c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed+0x1>
 730:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <setspeed>
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	87 e1       	ldi	r24, 0x17	; 23
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 740:	87 ec       	ldi	r24, 0xC7	; 199
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <Stepper_A_onerev+0x28>
 748:	00 c0       	rjmp	.+0      	; 0x74a <Stepper_A_onerev+0x2e>
 74a:	00 00       	nop
 74c:	08 95       	ret

0000074e <Stepper_B_onerev>:
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	89 e1       	ldi	r24, 0x19	; 25
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 75a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed>
 75e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed+0x1>
 762:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <setspeed>
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	89 e1       	ldi	r24, 0x19	; 25
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 772:	87 ec       	ldi	r24, 0xC7	; 199
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <Stepper_B_onerev+0x28>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <Stepper_B_onerev+0x2e>
 77c:	00 00       	nop
 77e:	08 95       	ret

00000780 <Stepper_C_onerev>:
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	8b e1       	ldi	r24, 0x1B	; 27
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 78c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed>
 790:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed+0x1>
 794:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <setspeed>
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	8b e1       	ldi	r24, 0x1B	; 27
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 7a4:	87 ec       	ldi	r24, 0xC7	; 199
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <Stepper_C_onerev+0x28>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <Stepper_C_onerev+0x2e>
 7ae:	00 00       	nop
 7b0:	08 95       	ret

000007b2 <Stepper_A_rev>:
	STpinChange(StepD,1);
	setspeed(speed);
	STpinChange(StepD,0);
	_delay_us (50);
}
void Stepper_A_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
 7b2:	cf 92       	push	r12
 7b4:	df 92       	push	r13
 7b6:	ef 92       	push	r14
 7b8:	ff 92       	push	r15
 7ba:	cf 93       	push	r28
 7bc:	c8 2f       	mov	r28, r24
 7be:	6a 01       	movw	r12, r20
 7c0:	7b 01       	movw	r14, r22
	if (clockw)
 7c2:	88 23       	and	r24, r24
 7c4:	39 f0       	breq	.+14     	; 0x7d4 <Stepper_A_rev+0x22>
	{
		STpinChange(DIRA,1);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	88 e1       	ldi	r24, 0x18	; 24
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <Stepper_A_rev+0x2e>
	}
	else
	{
		STpinChange(DIRA,0);
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	88 e1       	ldi	r24, 0x18	; 24
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
	}
	
	while (NuOfSteps > 0)
 7e0:	1c 14       	cp	r1, r12
 7e2:	1d 04       	cpc	r1, r13
 7e4:	1e 04       	cpc	r1, r14
 7e6:	1f 04       	cpc	r1, r15
 7e8:	4c f4       	brge	.+18     	; 0x7fc <Stepper_A_rev+0x4a>
	{
		Stepper_A_onerev(clockw);
 7ea:	8c 2f       	mov	r24, r28
 7ec:	0e 94 8e 03 	call	0x71c	; 0x71c <Stepper_A_onerev>
		NuOfSteps -= 1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	c8 1a       	sub	r12, r24
 7f4:	d1 08       	sbc	r13, r1
 7f6:	e1 08       	sbc	r14, r1
 7f8:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
 7fa:	b9 f7       	brne	.-18     	; 0x7ea <Stepper_A_rev+0x38>
	{
		Stepper_A_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 7fc:	cf 91       	pop	r28
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	df 90       	pop	r13
 804:	cf 90       	pop	r12
 806:	08 95       	ret

00000808 <Stepper_B_rev>:
void Stepper_B_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperB
 808:	cf 92       	push	r12
 80a:	df 92       	push	r13
 80c:	ef 92       	push	r14
 80e:	ff 92       	push	r15
 810:	cf 93       	push	r28
 812:	c8 2f       	mov	r28, r24
 814:	6a 01       	movw	r12, r20
 816:	7b 01       	movw	r14, r22
	if (clockw)
 818:	88 23       	and	r24, r24
 81a:	39 f0       	breq	.+14     	; 0x82a <Stepper_B_rev+0x22>
	{
		STpinChange(DIRB,1);
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	8a e1       	ldi	r24, 0x1A	; 26
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 828:	06 c0       	rjmp	.+12     	; 0x836 <Stepper_B_rev+0x2e>
	}
	else
	{
		STpinChange(DIRB,0);
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	8a e1       	ldi	r24, 0x1A	; 26
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
	}
	
	while (NuOfSteps > 0)
 836:	1c 14       	cp	r1, r12
 838:	1d 04       	cpc	r1, r13
 83a:	1e 04       	cpc	r1, r14
 83c:	1f 04       	cpc	r1, r15
 83e:	4c f4       	brge	.+18     	; 0x852 <Stepper_B_rev+0x4a>
	{
		Stepper_B_onerev(clockw);
 840:	8c 2f       	mov	r24, r28
 842:	0e 94 a7 03 	call	0x74e	; 0x74e <Stepper_B_onerev>
		NuOfSteps -= 1;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	c8 1a       	sub	r12, r24
 84a:	d1 08       	sbc	r13, r1
 84c:	e1 08       	sbc	r14, r1
 84e:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRB,0);
	}
	
	while (NuOfSteps > 0)
 850:	b9 f7       	brne	.-18     	; 0x840 <Stepper_B_rev+0x38>
	{
		Stepper_B_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 852:	cf 91       	pop	r28
 854:	ff 90       	pop	r15
 856:	ef 90       	pop	r14
 858:	df 90       	pop	r13
 85a:	cf 90       	pop	r12
 85c:	08 95       	ret

0000085e <Stepper_C_rev>:
void Stepper_C_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperC
 85e:	cf 92       	push	r12
 860:	df 92       	push	r13
 862:	ef 92       	push	r14
 864:	ff 92       	push	r15
 866:	cf 93       	push	r28
 868:	c8 2f       	mov	r28, r24
 86a:	6a 01       	movw	r12, r20
 86c:	7b 01       	movw	r14, r22
	if (clockw)
 86e:	88 23       	and	r24, r24
 870:	39 f0       	breq	.+14     	; 0x880 <Stepper_C_rev+0x22>
	{
		STpinChange(DIRC,1);
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	87 e0       	ldi	r24, 0x07	; 7
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
 87e:	06 c0       	rjmp	.+12     	; 0x88c <Stepper_C_rev+0x2e>
	}
	else
	{
		STpinChange(DIRC,0);
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	87 e0       	ldi	r24, 0x07	; 7
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 b5 01 	call	0x36a	; 0x36a <STpinChange>
	}
	
	while (NuOfSteps > 0)
 88c:	1c 14       	cp	r1, r12
 88e:	1d 04       	cpc	r1, r13
 890:	1e 04       	cpc	r1, r14
 892:	1f 04       	cpc	r1, r15
 894:	4c f4       	brge	.+18     	; 0x8a8 <Stepper_C_rev+0x4a>
	{
		Stepper_C_onerev(clockw);
 896:	8c 2f       	mov	r24, r28
 898:	0e 94 c0 03 	call	0x780	; 0x780 <Stepper_C_onerev>
		NuOfSteps -= 1;
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	c8 1a       	sub	r12, r24
 8a0:	d1 08       	sbc	r13, r1
 8a2:	e1 08       	sbc	r14, r1
 8a4:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRC,0);
	}
	
	while (NuOfSteps > 0)
 8a6:	b9 f7       	brne	.-18     	; 0x896 <Stepper_C_rev+0x38>
	{
		Stepper_C_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 8a8:	cf 91       	pop	r28
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	08 95       	ret

000008b4 <UART_INIT>:
	for (int k=0;k<7;k++)
	{
		Transmit_Char(ptr_string[k]);  //Send 6 characters.
		_delay_ms(100);
	}
}
 8b4:	87 e6       	ldi	r24, 0x67	; 103
 8b6:	89 b9       	out	0x09, r24	; 9
 8b8:	10 bc       	out	0x20, r1	; 32
 8ba:	88 e1       	ldi	r24, 0x18	; 24
 8bc:	8a b9       	out	0x0a, r24	; 10
 8be:	86 e8       	ldi	r24, 0x86	; 134
 8c0:	80 bd       	out	0x20, r24	; 32
 8c2:	08 95       	ret

000008c4 <Recive_Char>:
 8c4:	5f 9b       	sbis	0x0b, 7	; 11
 8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <Recive_Char>
 8c8:	8c b1       	in	r24, 0x0c	; 12
 8ca:	08 95       	ret

000008cc <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	8c 01       	movw	r16, r24
	 	char ch;
	     uint8_t len = 0;
 8d4:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
 8d6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Recive_Char>
	 		if((ch==';')) //read till enter key is pressed
 8da:	8b 33       	cpi	r24, 0x3B	; 59
 8dc:	29 f4       	brne	.+10     	; 0x8e8 <Recive_Data+0x1c>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
 8de:	f8 01       	movw	r30, r16
 8e0:	ec 0f       	add	r30, r28
 8e2:	f1 1d       	adc	r31, r1
 8e4:	80 83       	st	Z, r24
	             len++;
	         }
	 	}

	
}
 8e6:	0c c0       	rjmp	.+24     	; 0x900 <Recive_Data+0x34>
	 		if((ch==';')) //read till enter key is pressed
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
	 			break;           //and break the loop
	 		}
	         else if((ch=='\b') && (len!=0))
 8e8:	88 30       	cpi	r24, 0x08	; 8
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <Recive_Data+0x28>
 8ec:	cc 23       	and	r28, r28
 8ee:	11 f0       	breq	.+4      	; 0x8f4 <Recive_Data+0x28>
	         {
	 		    len--;    //If backspace is pressed then decrement the index to remove the old char
 8f0:	c1 50       	subi	r28, 0x01	; 1
 8f2:	f1 cf       	rjmp	.-30     	; 0x8d6 <Recive_Data+0xa>
	         }
	         else
	         {
	             ptr_string[len]=ch; //copy the char into string and increment the index
 8f4:	f8 01       	movw	r30, r16
 8f6:	ec 0f       	add	r30, r28
 8f8:	f1 1d       	adc	r31, r1
 8fa:	80 83       	st	Z, r24
	             len++;
 8fc:	cf 5f       	subi	r28, 0xFF	; 255
 8fe:	eb cf       	rjmp	.-42     	; 0x8d6 <Recive_Data+0xa>
	         }
	 	}

	
}
 900:	cf 91       	pop	r28
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	08 95       	ret

00000908 <__divmodhi4>:
 908:	97 fb       	bst	r25, 7
 90a:	07 2e       	mov	r0, r23
 90c:	16 f4       	brtc	.+4      	; 0x912 <__divmodhi4+0xa>
 90e:	00 94       	com	r0
 910:	07 d0       	rcall	.+14     	; 0x920 <__divmodhi4_neg1>
 912:	77 fd       	sbrc	r23, 7
 914:	09 d0       	rcall	.+18     	; 0x928 <__divmodhi4_neg2>
 916:	0e 94 98 04 	call	0x930	; 0x930 <__udivmodhi4>
 91a:	07 fc       	sbrc	r0, 7
 91c:	05 d0       	rcall	.+10     	; 0x928 <__divmodhi4_neg2>
 91e:	3e f4       	brtc	.+14     	; 0x92e <__divmodhi4_exit>

00000920 <__divmodhi4_neg1>:
 920:	90 95       	com	r25
 922:	81 95       	neg	r24
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	08 95       	ret

00000928 <__divmodhi4_neg2>:
 928:	70 95       	com	r23
 92a:	61 95       	neg	r22
 92c:	7f 4f       	sbci	r23, 0xFF	; 255

0000092e <__divmodhi4_exit>:
 92e:	08 95       	ret

00000930 <__udivmodhi4>:
 930:	aa 1b       	sub	r26, r26
 932:	bb 1b       	sub	r27, r27
 934:	51 e1       	ldi	r21, 0x11	; 17
 936:	07 c0       	rjmp	.+14     	; 0x946 <__udivmodhi4_ep>

00000938 <__udivmodhi4_loop>:
 938:	aa 1f       	adc	r26, r26
 93a:	bb 1f       	adc	r27, r27
 93c:	a6 17       	cp	r26, r22
 93e:	b7 07       	cpc	r27, r23
 940:	10 f0       	brcs	.+4      	; 0x946 <__udivmodhi4_ep>
 942:	a6 1b       	sub	r26, r22
 944:	b7 0b       	sbc	r27, r23

00000946 <__udivmodhi4_ep>:
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	5a 95       	dec	r21
 94c:	a9 f7       	brne	.-22     	; 0x938 <__udivmodhi4_loop>
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	bc 01       	movw	r22, r24
 954:	cd 01       	movw	r24, r26
 956:	08 95       	ret

00000958 <atoi>:
 958:	fc 01       	movw	r30, r24
 95a:	88 27       	eor	r24, r24
 95c:	99 27       	eor	r25, r25
 95e:	e8 94       	clt
 960:	21 91       	ld	r18, Z+
 962:	20 32       	cpi	r18, 0x20	; 32
 964:	e9 f3       	breq	.-6      	; 0x960 <atoi+0x8>
 966:	29 30       	cpi	r18, 0x09	; 9
 968:	10 f0       	brcs	.+4      	; 0x96e <atoi+0x16>
 96a:	2e 30       	cpi	r18, 0x0E	; 14
 96c:	c8 f3       	brcs	.-14     	; 0x960 <atoi+0x8>
 96e:	2b 32       	cpi	r18, 0x2B	; 43
 970:	41 f0       	breq	.+16     	; 0x982 <atoi+0x2a>
 972:	2d 32       	cpi	r18, 0x2D	; 45
 974:	39 f4       	brne	.+14     	; 0x984 <atoi+0x2c>
 976:	68 94       	set
 978:	04 c0       	rjmp	.+8      	; 0x982 <atoi+0x2a>
 97a:	0e 94 ca 04 	call	0x994	; 0x994 <__mulhi_const_10>
 97e:	82 0f       	add	r24, r18
 980:	91 1d       	adc	r25, r1
 982:	21 91       	ld	r18, Z+
 984:	20 53       	subi	r18, 0x30	; 48
 986:	2a 30       	cpi	r18, 0x0A	; 10
 988:	c0 f3       	brcs	.-16     	; 0x97a <atoi+0x22>
 98a:	1e f4       	brtc	.+6      	; 0x992 <atoi+0x3a>
 98c:	90 95       	com	r25
 98e:	81 95       	neg	r24
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	08 95       	ret

00000994 <__mulhi_const_10>:
 994:	7a e0       	ldi	r23, 0x0A	; 10
 996:	97 9f       	mul	r25, r23
 998:	90 2d       	mov	r25, r0
 99a:	87 9f       	mul	r24, r23
 99c:	80 2d       	mov	r24, r0
 99e:	91 0d       	add	r25, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	08 95       	ret

000009a4 <_exit>:
 9a4:	f8 94       	cli

000009a6 <__stop_program>:
 9a6:	ff cf       	rjmp	.-2      	; 0x9a6 <__stop_program>
